{"version":3,"sources":["angular-jsvat.js"],"names":["angular","module","factory","jsvat","_validateRegex","vat","regex","test","_validateRules","countryName","parsedNum","exec","number","_checks","_validate","result","expect","temp","CONDITIONS","austria","multipliers","belgium","bulgaria","physical","foreigner","miscellaneous","switzerland","cyprus","czech_republic","lookup","additional","germany","denmark","estonia","greece","spain","europe","finland","france","united_kingdom","croatia","hungary","ireland","italy","latvia","lithunia","short","med","alt","luxembourg","malta","netherlands","norway","poland","portugal","romania","russia","m_1","m_2","m_3","serbia","slovenia","slovakia_republic","sweden","exports","checkVAT","toString","toUpperCase","replace","hasOwnProperty","Array","isArray","i","length","total","charAt","Math","floor","slice","check","checkNineLengthVat","j","isPhysicalPerson","month","k","substr","isForeigner","l","miscellaneousVAT","m","String","fromCharCode","product","sum","checkDigit","tempnumber","substring","no","abs","vatLength","expect2","total1","total2","digit","R","S"],"mappings":"AAAAA,QAAQC,OAAO,YAEVC,QAAQ,eAAgB,WAE7B,GAAIC,GAAQ,WACR,YA8KA,SAASC,GAAeC,EAAKC,GACzB,MAAOA,GAAMC,KAAKF,GAGtB,QAASG,GAAeH,EAAKC,EAAOG,GAChC,GAAIC,GAAYJ,EAAMK,KAAKN,GAGvBO,EAASF,EAAU,EAGvB,OAAOG,GAAQJ,GAAaG,EAAQH,GAGxC,QAASK,GAAUT,EAAKC,EAAOG,GAC3B,GAAIM,IAAS,CAIb,OAHIX,GAAeC,EAAKC,KACpBS,EAASP,EAAeH,EAAKC,EAAOG,IAEjCM,EA/LX,GA0NIC,GACAC,EA3NAC,GACAC,SACIC,aAAc,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAChCd,MAAO,kBAEXe,SACIf,MAAO,mBAEXgB,UACIF,aACIG,UAAW,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GACpCC,WAAY,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,GACzCC,eAAgB,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAE5CnB,MAAO,oBAEXoB,aACIN,aAAc,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnCd,MAAO,yBAEXqB,QACIrB,MAAO,4BAEXsB,gBACIR,aAAc,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAChCS,QAAS,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IACvCvB,MAAO,2BACPwB,YACI,UACA,sCACA,WACA,mCAGRC,SACIzB,MAAO,sBAEX0B,SACIZ,aAAc,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnCd,MAAO,iBAEX2B,SACIb,aAAc,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnCd,MAAO,mBAEX4B,QACId,aAAc,IAAK,IAAK,GAAI,GAAI,GAAI,EAAG,EAAG,GAC1Cd,MAAO,iBAEX6B,OACIf,aAAc,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAChCd,OACI,qBACA,8BACA,4BACA,4BAEJwB,YACI,qBACA,0BACA,wBACA,0BAGRM,QACI9B,MAAO,iBAEX+B,SACIjB,aAAc,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GACjCd,MAAO,iBAEXgC,QACIhC,OACI,iBACA,4BACA,6BACA,gCAIRiC,gBACInB,aAAc,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAChCd,OACI,iBACA,kBACA,mBACA,qBAIRkC,SACIlC,MAAO,kBAEXmC,SACIrB,aAAc,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAChCd,MAAO,iBAEXoC,SACItB,aAAc,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAChCd,OACI,qBACA,oCACA,2BAIRqC,OACIvB,aAAc,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzCd,MAAO,kBAEXsC,QACIxB,aAAc,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAC1Cd,MAAO,kBAEXuC,UACIzB,aACI0B,SAAQ,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC7BC,KAAM,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACpCC,KAAM,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAExC1C,MAAO,wBAEX2C,YACI3C,MAAO,iBAEX4C,OACI9B,aAAc,EAAG,EAAG,EAAG,EAAG,EAAG,GAC7Bd,MAAO,sBAEX6C,aACI/B,aAAc,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnCd,MAAO,uBAEX8C,QACIhC,aAAc,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnCd,MAAO,iBAEX+C,QACIjC,aAAc,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtCd,MAAO,kBAEXgD,UACIlC,aAAc,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnCd,MAAO,iBAEXiD,SACInC,aAAc,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtCd,MAAO,wBAEXkD,QACIpC,aACIqC,KAAM,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClCC,KAAM,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACrCC,KAAM,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAE5CrD,MAAO,yBAEXsD,QACItD,MAAO,iBAEXuD,UACIzC,aAAc,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAChCd,MAAO,sBAEXwD,mBACIxD,MAAO,gCAEXyD,QACIzD,MAAO,qBA0BX0D,GACAC,SAAU,SAAU5D,GAChB,IAAKA,EAAK,OAAO,CACjBA,GAAMA,EAAI6D,WAAWC,cAAcC,QAAQ,cAAe,GAE1D,KAAK,GAAI3D,KAAeS,GACpB,GAAIA,EAAWmD,eAAe5D,GAAc,CACxC,GAAIH,GAAQY,EAAWT,GAAaH,KAGpC,IAAIgE,MAAMC,QAAQjE,IACd,IAAK,GAAIkE,GAAI,EAAGA,EAAIlE,EAAMmE,OAAQD,IAC9B,GAAI1D,EAAUT,EAAKC,EAAMkE,GAAI/D,GAAc,OAAO,MAGtD,IAAIK,EAAUT,EAAKC,EAAOG,GAAc,OAAO,EAI3D,OAAO,IAQXI,GACAM,QAAS,SAAUd,EAAKI,GAEpB,IAAK,GADDiE,GAAQ,EACHF,EAAI,EAAO,EAAJA,EAAOA,IACnBvD,EAAOZ,EAAIsE,OAAOH,GAAKtD,EAAWT,GAAaW,YAAYoD,GAEvDE,GADAzD,EAAO,EACE2D,KAAKC,MAAM5D,EAAO,IAAMA,EAAO,GAE/BA,CAQjB,OALAyD,GAAQ,IAAMA,EAAQ,GAAK,GACb,KAAVA,IAAcA,EAAQ,GAE1B1D,GAAUX,EAAIyE,MAAM,EAAG,GAEhBJ,IAAU1D,GAErBK,QAAS,SAAUhB,GAKf,GAJmB,IAAfA,EAAIoE,SACJpE,EAAM,IAAMA,GAGS,KAApBA,EAAIyE,MAAM,EAAG,GAAU,OAAO,CAEnC,IAAIC,GAAS,IAAM1E,EAAIyE,MAAM,EAAG,GAAK,EAErC,OADA9D,IAAUX,EAAIyE,MAAM,EAAG,IAChBC,IAAU/D,GAErBM,SAAU,SAAUjB,EAAKI,GACrB,GAAIuE,GAAqB,WACrB,GAAIN,GAAO,CACXzD,GAAO,CACP,KAAK,GAAIuD,GAAI,EAAO,EAAJA,EAAOA,IACnBvD,IAASZ,EAAIsE,OAAOH,IAAMA,EAAI,EAIlC,IADAE,EAAQzD,EAAO,GACD,KAAVyD,EAEA,MADA1D,IAAUX,EAAIyE,MAAM,GACbJ,IAAU1D,CAGrBC,GAAO,CACP,KAAK,GAAIgE,GAAI,EAAO,EAAJA,EAAOA,IACnBhE,IAASZ,EAAIsE,OAAOM,IAAMA,EAAI,EAOlC,OAJAP,GAAQzD,EAAO,GACD,KAAVyD,IAAcA,EAAQ,GAC1B1D,GAAUX,EAAIyE,MAAM,GAEbJ,IAAU1D,GAGjBkE,EAAmB,WACnB,GAAIR,GAAQ,CAEZ,IAAI,4BAA8BnE,KAAKF,GAAM,CAEzC,GAAI8E,IAAS9E,EAAIyE,MAAM,EAAG,EAC1B,IAAKK,EAAQ,GAAa,GAARA,GAAgBA,EAAQ,IAAc,GAARA,GAAgBA,EAAQ,IAAc,GAARA,EAAa,CAEvFT,EAAQ,CACR,KAAK,GAAIU,GAAI,EAAO,EAAJA,EAAOA,IACnBV,IAAUrE,EAAIsE,OAAOS,GAAKlE,EAAWT,GAAaW,YAAYG,SAAS6D,EAO3E,IAJAV,GAAgB,GACF,KAAVA,IAAcA,EAAQ,GAGtBA,KAAWrE,EAAIgF,OAAO,EAAG,GAAI,OAAO,GAIhD,OAAO,GAKPC,EAAc,WAGd,IAAK,GAFDZ,GAAQ,EAEHa,EAAI,EAAO,EAAJA,EAAOA,IACnBb,IAAUrE,EAAIsE,OAAOY,GAAKrE,EAAWT,GAAaW,YAAYI,UAAU+D,EAI5E,OAAIb,GAAQ,MAAQrE,EAAIgF,OAAO,EAAG,IACvB,EADX,QAKAG,EAAmB,WAInB,IAAK,GAHDd,GAAQ,EAGHe,EAAI,EAAO,EAAJA,EAAOA,IACnBf,IAAUrE,EAAIsE,OAAOc,GAAKvE,EAAWT,GAAaW,YAAYK,cAAcgE,EAKhF,OADAf,GAAQ,GAAKA,EAAQ,GACP,KAAVA,GAAqB,GACX,KAAVA,IAAcA,EAAQ,GAG1B1D,GAAUX,EAAIgF,OAAO,EAAG,GACjBX,IAAU1D,GAGrB,OAAmB,KAAfX,EAAIoE,OACGO,IAEAE,KAAsBI,KAAiBE,KAItD9D,YAAa,SAAUrB,EAAKI,GAExB,IAAK,GADDiE,GAAQ,EACHF,EAAI,EAAO,EAAJA,EAAOA,IACnBE,IAAUrE,EAAIsE,OAAOH,GAAKtD,EAAWT,GAAaW,YAAYoD,EAKlE,OADAE,GAAQ,GAAKA,EAAQ,GACP,KAAVA,GAAqB,GACX,KAAVA,IAAcA,EAAQ,GAG1B1D,GAAUX,EAAIgF,OAAO,EAAG,GACjBX,IAAU1D,IAErBW,OAAQ,SAAUtB,GACd,GAAIqE,GAAQ,CAEZ,IAAyB,MAApBrE,EAAIyE,MAAM,EAAG,GAAW,OAAO,CAIpC,KAAK,GAAIN,GAAI,EAAO,EAAJA,EAAOA,IAAK,CACxB,GAAIvD,IAAQZ,EAAIsE,OAAOH,EACvB,IAAIA,EAAI,IAAM,EACV,OAAQvD,GACJ,IAAK,GACDA,EAAO,CACP,MACJ,KAAK,GACDA,EAAO,CACP,MACJ,KAAK,GACDA,EAAO,CACP,MACJ,KAAK,GACDA,EAAO,CACP,MACJ,KAAK,GACDA,EAAO,CACP,MACJ,SACIA,EAAc,EAAPA,EAAW,EAG9ByD,GAASzD,EASb,MALAyD,IAAgB,GAChBA,EAAQgB,OAAOC,aAAajB,EAAQ,IAGpC1D,EAASX,EAAIgF,OAAO,EAAG,GAChBX,IAAU1D,GAErBY,eAAgB,SAAUvB,EAAKI,GAC3B,GAAIiE,GAAQ,CAGZ,IAAIxD,EAAWT,GAAaqB,WAAW,GAAGvB,KAAKF,GAAM,CAGjD,IAAK,GAAImE,GAAI,EAAO,EAAJA,EAAOA,IACnBE,IAAUrE,EAAIsE,OAAOH,GAAKtD,EAAWT,GAAaW,YAAYoD,EAUlE,OANAE,GAAQ,GAAKA,EAAQ,GACP,KAAVA,IAAcA,EAAQ,GACZ,KAAVA,IAAcA,EAAQ,GAG1B1D,GAAUX,EAAIyE,MAAM,EAAG,GAChBJ,IAAU1D,EAIhB,GAAIE,EAAWT,GAAaqB,WAAW,GAAGvB,KAAKF,GAAM,CAGtD,IAAK,GAAI4E,GAAI,EAAO,EAAJA,EAAOA,IACnBP,IAAUrE,EAAIsE,OAAOM,EAAI,GAAK/D,EAAWT,GAAaW,YAAY6D,EAUtE,OANAP,GAAQ,GAAKA,EAAQ,GACP,KAAVA,IAAcA,EAAQ,GACZ,KAAVA,IAAcA,EAAQ,GAG1B1D,GAAUX,EAAIyE,MAAM,EAAG,GAChB5D,EAAWT,GAAaoB,OAAO6C,EAAQ,KAAO1D,EAIpD,GAAIE,EAAWT,GAAaqB,WAAW,GAAGvB,KAAKF,GAAM,CACtD,GAAIY,IAAQZ,EAAIyE,MAAM,EAAG,GAAKzE,EAAIyE,MAAM,EAAG,GAAKzE,EAAIyE,MAAM,EAAG,GAAKzE,EAAIyE,MAAM,EAAG,GAAKzE,EAAIyE,MAAM,EAE9F,OADA9D,IAAUX,EAAM,KAAO,IACbY,EAAO,KAAO,IAAKD,GAIjC,OAAO,GAEXe,QAAS,SAAU1B,GAQf,IAAK,GAHDuF,GAAU,GACVC,EAAM,EACNC,EAAa,EACRtB,EAAI,EAAO,EAAJA,EAAOA,IAGnBqB,IAAQxF,EAAIsE,OAAOH,GAAKoB,GAAW,GACvB,IAARC,IACAA,EAAM,IAEVD,EAAW,EAAIC,EAAO,EAa1B,OARIC,GADA,GAAKF,IAAY,GACJ,EAEA,GAAKA,EAKtB5E,GAAUX,EAAIyE,MAAM,EAAG,GAChBgB,IAAe9E,GAE1BgB,QAAS,SAAU3B,EAAKI,GAEpB,IAAK,GADDiE,GAAQ,EACHF,EAAI,EAAO,EAAJA,EAAOA,IACnBE,IAAUrE,EAAIsE,OAAOH,GAAKtD,EAAWT,GAAaW,YAAYoD,EAGlE,OAAOE,GAAQ,KAAO,GAE1BzC,QAAS,SAAU5B,EAAKI,GAGpB,IAAK,GAFDiE,GAAQ,EAEHF,EAAI,EAAO,EAAJA,EAAOA,IACnBE,IAAUrE,EAAIsE,OAAOH,GAAKtD,EAAWT,GAAaW,YAAYoD,EASlE,OALAE,GAAQ,GAAKA,EAAQ,GACP,KAAVA,IAAcA,EAAQ,GAG1B1D,GAAUX,EAAIyE,MAAM,EAAG,GAChBJ,IAAU1D,GAErBkB,OAAQ,SAAU7B,EAAKI,GACnB,GAAIiE,GAAQ,CAEO,KAAfrE,EAAIoE,SACJpE,EAAM,IAAMA,EAIhB,KAAK,GAAImE,GAAI,EAAO,EAAJA,EAAOA,IACnBE,IAAUrE,EAAIsE,OAAOH,GAAKtD,EAAWT,GAAaW,YAAYoD,EAWlE,OAPAE,IAAgB,GACZA,EAAQ,IACRA,EAAQ,GAIZ1D,GAAUX,EAAIyE,MAAM,EAAG,GAChBJ,IAAU1D,GAErBmB,MAAO,SAAU9B,EAAKI,GAClB,GAAI+D,GAAI,EACJE,EAAQ,CAGZ,IAAIxD,EAAWT,GAAaqB,WAAW,GAAGvB,KAAKF,GAAM,CAGjD,IAAKmE,EAAI,EAAO,EAAJA,EAAOA,IACfvD,EAAOZ,EAAIsE,OAAOH,EAAI,GAAKtD,EAAWT,GAAaW,YAAYoD,GAE3DE,GADAzD,EAAO,EACE2D,KAAKC,MAAM5D,EAAO,IAAMA,EAAO,GAE/BA,CAUjB,OAPAyD,GAAQ,GAAKA,EAAQ,GACP,KAAVA,IACAA,EAAQ,GAIZ1D,GAAUX,EAAIyE,MAAM,EAAG,GAChBJ,IAAU1D,EAIhB,GAAIE,EAAWT,GAAaqB,WAAW,GAAGvB,KAAKF,GAAM,CAGtD,IAAKmE,EAAI,EAAO,EAAJA,EAAOA,IACfvD,EAAOZ,EAAIsE,OAAOH,EAAI,GAAKtD,EAAWT,GAAaW,YAAYoD,GAE3DE,GADAzD,EAAO,EACE2D,KAAKC,MAAM5D,EAAO,IAAMA,EAAO,GAE/BA,CASjB,OALAyD,GAAQ,GAAKA,EAAQ,GACrBA,EAAQgB,OAAOC,aAAajB,EAAQ,IAGpC1D,EAASX,EAAIyE,MAAM,EAAG,GACfJ,IAAU1D,EAIhB,GAAIE,EAAWT,GAAaqB,WAAW,GAAGvB,KAAKF,GAAM,CACtD,GAAI0F,GAAa1F,CAIjB,OAHmC,MAA/B0F,EAAWC,UAAU,EAAG,KAAYD,EAAaA,EAAW3B,QAAQ,IAAK,MAC1C,MAA/B2B,EAAWC,UAAU,EAAG,KAAYD,EAAaA,EAAW3B,QAAQ,IAAK,MAC7EpD,EAAS,0BAA0B2D,QAAQoB,EAAWC,UAAU,EAAG,GAAK,IACjED,EAAWpB,OAAO,KAAO3D,EAI/B,MAAIE,GAAWT,GAAaqB,WAAW,GAAGvB,KAAKF,IAChDW,EAAS,0BAA0B2D,QAAQtE,EAAI2F,UAAU,EAAG,GAAK,IAC1D3F,EAAIsE,OAAO,KAAO3D,IAGjB,GAEhBoB,OAAQ,WAIJ,OAAO,GAEXC,QAAS,SAAUhC,EAAKI,GAGpB,IAAK,GAFDiE,GAAQ,EAEHF,EAAI,EAAO,EAAJA,EAAOA,IAAKE,IAAUrE,EAAIsE,OAAOH,GAAKtD,EAAWT,GAAaW,YAAYoD,EAU1F,OAPAE,GAAQ,GAAKA,EAAQ,GACjBA,EAAQ,IACRA,EAAQ,GAIZ1D,GAAUX,EAAIyE,MAAM,EAAG,GAChBJ,IAAU1D,GAErBsB,OAAQ,SAAUjC,GACd,GAAIqE,EAEJ,OAAK,WAAanE,KAAKF,IAKvBqE,GAASrE,EAAI2F,UAAU,GAGvBtB,GAAiB,IAARA,EAAc,IAAM,GAG7B1D,GAAUX,EAAIyE,MAAM,EAAG,GAChBJ,IAAU1D,IAXN,GAafuB,eAAgB,SAAUlC,EAAKI,GAC3B,GAAIiE,GAAQ,CAEZ,IAAyB,OAArBrE,EAAIgF,OAAO,EAAG,GAEd,MADArE,GAAS,IACFX,EAAIgF,OAAO,EAAG,GAAKrE,CAI9B,IAAyB,OAArBX,EAAIgF,OAAO,EAAG,GAEd,MADArE,GAAS,IACFX,EAAIgF,OAAO,EAAG,GAAKrE,CAO9B,IAAsB,KAAjBX,EAAIyE,MAAM,GAAU,OAAO,CAMhC,KAAK,GAHDmB,IAAM5F,EAAIyE,MAAM,EAAG,GAGdN,EAAI,EAAO,EAAJA,EAAOA,IACnBE,IAAUrE,EAAIsE,OAAOH,GAAKtD,EAAWT,GAAaW,YAAYoD,EAQlE,KADA,GAAIsB,GAAapB,EACVoB,EAAa,GAChBA,GAA0B,EAO9B,OADAA,GAAalB,KAAKsB,IAAIJ,GAClBA,KAAgBzF,EAAIyE,MAAM,EAAG,IAAW,QAALmB,IAAsB,IAALA,GAAeA,EAAK,UAAiB,QAALA,GAAgBA,EAAK,OAAiB,GAG1HH,GAAc,GACdA,GAA0B,GAE1BA,GAA0B,GAC9B9E,GAAUX,EAAIyE,MAAM,EAAG,MACbgB,IAAe9E,GAAUiF,EAAK,OAE5CzD,QAAS,SAAUnC,GAQf,IAAK,GAHDuF,GAAU,GACVC,EAAM,EAEDrB,EAAI,EAAO,GAAJA,EAAQA,IAGpBqB,IAAQxF,EAAIsE,OAAOH,GAAKoB,GAAW,GACvB,IAARC,IACAA,EAAM,IAGVD,EAAW,EAAIC,EAAO,EAK1B,OADA7E,IAAUX,EAAIyE,MAAM,GAAI,KAChBc,EAAU5E,GAAU,KAAO,GAEvCyB,QAAS,SAAUpC,EAAKI,GAGpB,IAAK,GAFDiE,GAAQ,EAEHF,EAAI,EAAO,EAAJA,EAAOA,IACnBE,IAAUrE,EAAIsE,OAAOH,GAAKtD,EAAWT,GAAaW,YAAYoD,EASlE,OALAE,GAAQ,GAAKA,EAAQ,GACP,KAAVA,IAAcA,EAAQ,GAG1B1D,GAAUX,EAAIyE,MAAM,EAAG,GAChBJ,IAAU1D,GAErB0B,QAAS,SAAUrC,EAAKI,GACpB,GAAIiE,GAAQ,CAER,gBAAenE,KAAKF,KACpBA,EAAM,IAAMA,EAAI2F,UAAU,EAAG,GAAK3F,EAAI2F,UAAU,EAAG,GAAK3F,EAAI2F,UAAU,EAAG,GAI7E,KAAK,GAAIxB,GAAI,EAAO,EAAJA,EAAOA,IACnBE,IAAUrE,EAAIsE,OAAOH,GAAKtD,EAAWT,GAAaW,YAAYoD,EAuBlE,OAnBI,mBAAmBjE,KAAKF,KAGpBqE,GADkB,MAAlBrE,EAAIsE,OAAO,GACF,GAEA,GAKjBD,GAAgB,GAEZA,EADU,IAAVA,EACQ,IAEAgB,OAAOC,aAAajB,EAAQ,IAIxC1D,EAASX,EAAIyE,MAAM,EAAG,GACfJ,IAAU1D,GAErB2B,MAAO,SAAUtC,EAAKI,GAClB,GAAIiE,GAAQ,CAEZ,IAAyB,KAApBrE,EAAIyE,MAAM,EAAG,GACd,OAAO,CAIX,IADA7D,GAAQZ,EAAIyE,MAAM,EAAG,IACT,EAAP7D,GAAcA,EAAO,KAAiB,MAATA,GAAyB,MAATA,EAC9C,OAAO,CAIX,KAAK,GAAIuD,GAAI,EAAO,GAAJA,EAAQA,IACpBvD,GAAQZ,EAAIsE,OAAOH,GAAKtD,EAAWT,GAAaW,YAAYoD,GAExDE,GADAzD,EAAO,EACE2D,KAAKC,MAAM5D,EAAO,IAAMA,EAAO,GAE/BA,CAWjB,OAPAyD,GAAQ,GAAKA,EAAQ,GACjBA,EAAQ,IACRA,EAAQ,GAIZ1D,GAAUX,EAAIyE,MAAM,GAAI,IACjBJ,IAAU1D,GAErB6B,SAAU,SAAUxC,EAAKI,GACrB,GAAIiE,GAAQ,CAEZ,IAAmB,IAAfrE,EAAIoE,OAAc,CAGlB,IAAK,UAAYlE,KAAKF,GAAM,OAAO,CAGnCqE,GAAQ,CACR,KAAK,GAAIF,GAAI,EAAO,EAAJA,EAAOA,IACnBE,IAAUrE,EAAIsE,OAAOH,IAAMA,EAAI,EAInC,IAAIE,EAAQ,KAAO,GAAI,CACnBA,EAAQ,CACR,KAAK,GAAIO,GAAI,EAAO,EAAJA,EAAOA,IACnBP,IAAUrE,EAAIsE,OAAOM,GAAK/D,EAAWT,GAAaW,YAAxBF,SAA0C+D,GAY5E,MAPAP,IAAgB,GACF,KAAVA,IACAA,EAAQ,GAIZ1D,GAAUX,EAAIyE,MAAM,EAAG,GAChBJ,IAAU1D,EAOjB,IAAK,WAAaT,KAAKF,GAAM,OAAO,CAGpCqE,GAAQ,CACR,KAAK,GAAIU,GAAI,EAAO,GAAJA,EAAQA,IACpBV,IAAUrE,EAAIsE,OAAOS,GAAKlE,EAAWT,GAAaW,YAAY2B,IAAIqC,EAItE,IAAIV,EAAQ,KAAO,GAAI,CACnBA,EAAQ,CACR,KAAK,GAAIa,GAAI,EAAO,GAAJA,EAAQA,IACpBb,IAAUrE,EAAIsE,OAAOY,GAAKrE,EAAWT,GAAaW,YAAY4B,IAAIuC,GAY1E,MAPAb,IAAgB,GACF,KAAVA,IACAA,EAAQ,GAIZ1D,GAAUX,EAAIyE,MAAM,GAAI,IACjBJ,IAAU1D,GAGzBiC,WAAY,SAAU5C,GAClB,GAAIW,IAAUX,EAAIyE,MAAM,EAAG,GACvBgB,GAAczF,EAAIyE,MAAM,EAAG,GAAK,EAGpC,OAAOgB,KAAe9E,GAE1B4B,OAAQ,SAAUvC,EAAKI,GACnB,GAAIiE,GAAQ,CAIZ,IAAI,SAAWnE,KAAKF,GAChB,QAAS,wBAA0BE,KAAKF,EAIxC,KAAK,GAAImE,GAAI,EAAO,GAAJA,EAAQA,IACpBE,IAAUrE,EAAIsE,OAAOH,GAAKtD,EAAWT,GAAaW,YAAYoD,EAclE,OAVIE,GAAQ,KAAO,GAAgB,IAAXrE,EAAI,KAAUqE,GAAgB,IAClDA,EAAQ,KAAO,EACfA,EAAQ,EAAIA,EAAQ,GACfA,EAAQ,GAAK,EAClBA,EAAQ,GAAKA,EAAQ,GACH,EAAbA,EAAQ,KACbA,EAAQ,EAAIA,EAAQ,IAGxB1D,GAAUX,EAAIyE,MAAM,GAAI,IACjBJ,IAAU1D,GAGzBkC,MAAO,SAAU7C,EAAKI,GAGlB,IAAK,GAFDiE,GAAQ,EAEHF,EAAI,EAAO,EAAJA,EAAOA,IACnBE,IAAUrE,EAAIsE,OAAOH,GAAKtD,EAAWT,GAAaW,YAAYoD,EAQlE,OAJAE,GAAQ,GAAKA,EAAQ,GAGrB1D,GAAUX,EAAIyE,MAAM,EAAG,GAChBJ,IAAU1D,GAErBmC,YAAa,SAAU9C,EAAKI,GAGxB,IAAK,GAFDiE,GAAQ,EAEHF,EAAI,EAAO,EAAJA,EAAOA,IACnBE,IAAUrE,EAAIsE,OAAOH,GAAKtD,EAAWT,GAAaW,YAAYoD,EAWlE,OAPAE,IAAgB,GACZA,EAAQ,IACRA,EAAQ,GAIZ1D,GAAUX,EAAIyE,MAAM,EAAG,GAChBJ,IAAU1D,GAErBoC,OAAQ,SAAU/C,EAAKI,GAKnB,IAAK,GAJDiE,GAAQ,EAIHF,EAAI,EAAO,EAAJA,EAAOA,IACnBE,IAAUrE,EAAIsE,OAAOH,GAAKtD,EAAWT,GAAaW,YAAYoD,EAQlE,OAJAE,GAAQ,GAAKA,EAAQ,GACP,KAAVA,IACAA,EAAQ,GAEA,GAARA,GAGA1D,GAAUX,EAAIyE,MAAM,EAAG,GAChBJ,IAAU1D,GAJrB,QAOJqC,OAAQ,SAAUhD,EAAKI,GAGnB,IAAK,GAFDiE,GAAQ,EAEHF,EAAI,EAAO,EAAJA,EAAOA,IACnBE,IAAUrE,EAAIsE,OAAOH,GAAKtD,EAAWT,GAAaW,YAAYoD,EAWlE,OAPAE,IAAgB,GACZA,EAAQ,IACRA,EAAQ,GAIZ1D,GAAUX,EAAIyE,MAAM,EAAG,IAChBJ,IAAU1D,GAErBsC,SAAU,SAAUjD,EAAKI,GAGrB,IAAK,GAFDiE,GAAQ,EAEHF,EAAI,EAAO,EAAJA,EAAOA,IACnBE,IAAUrE,EAAIsE,OAAOH,GAAKtD,EAAWT,GAAaW,YAAYoD,EAWlE,OAPAE,GAAQ,GAAKA,EAAQ,GACjBA,EAAQ,IACRA,EAAQ,GAIZ1D,GAAUX,EAAIyE,MAAM,EAAG,GAChBJ,IAAU1D,GAErBuC,QAAS,SAAUlD,EAAKI,GAMpB,IAAK,GALDiE,GAAQ,EAERyB,EAAY9F,EAAIoE,OAChBrD,EAAcF,EAAWT,GAAaW,YAAY0D,MAAM,GAAKqB,GAExD3B,EAAI,EAAGA,EAAInE,EAAIoE,OAAS,EAAGD,IAChCE,IAAUrE,EAAIsE,OAAOH,GAAKpD,EAAYoD,EAS1C,OALAE,GAAS,GAAKA,EAAS,GACT,KAAVA,IAAcA,EAAQ,GAG1B1D,GAAUX,EAAIyE,MAAMzE,EAAIoE,OAAS,EAAGpE,EAAIoE,QACjCC,IAAU1D,GAErB4C,OAAQ,SAAUvD,GAOd,IAAK,GAFDyF,GAFAF,EAAU,GACVC,EAAM,EAGDrB,EAAI,EAAO,EAAJA,EAAOA,IAGnBqB,IAAQxF,EAAIsE,OAAOH,GAAKoB,GAAW,GACvB,IAARC,IACAA,EAAM,IAEVD,EAAW,EAAIC,EAAO,EAM1B,OAFA7E,GAAS,EACT8E,GAAcF,IAAYvF,EAAIyE,MAAM,EAAG,IAAO,GACvCgB,IAAe9E,GAE1BwC,OAAQ,SAAUnD,EAAKI,GACnB,GACI2F,GADA1B,EAAQ,CAOZ,IAAmB,KAAfrE,EAAIoE,OAAe,CAEnB,IAAK,GAAID,GAAI,EAAO,GAAJA,EAAQA,IACpBE,IAAUrE,EAAIsE,OAAOH,GAAKtD,EAAWT,GAAaW,YAAYqC,IAAIe,EAUtE,OAPAE,IAAgB,GACZA,EAAQ,IACRA,GAAgB,IAIpB1D,GAAUX,EAAIyE,MAAM,EAAG,IAChBJ,IAAU1D,EAGd,GAAmB,KAAfX,EAAIoE,OAAe,CAI1B,IAAK,GAHD4B,GAAS,EACTC,EAAS,EAEJrB,EAAI,EAAO,GAAJA,EAAQA,IACpBoB,IAAWhG,EAAIsE,OAAOM,GAAK/D,EAAWT,GAAaW,YAAYsC,IAAIuB,EAGvEoB,IAAkB,GACdA,EAAS,IACTA,GAAkB,GAGtB,KAAK,GAAIjB,GAAI,EAAO,GAAJA,EAAQA,IACpBkB,IAAWjG,EAAIsE,OAAOS,GAAKlE,EAAWT,GAAaW,YAAYuC,IAAIyB,EAcvE,OAXAkB,IAAkB,GACdA,EAAS,IACTA,GAAkB,IAMtBtF,EAAUqF,KAAYhG,EAAIyE,MAAM,GAAI,IAEpCsB,EAAWE,KAAYjG,EAAIyE,MAAM,GAAI,IAC9B,GAAY,IAG3Bf,OAAQ,SAAU1D,GAId,IAAK,GADDkG,GADAC,EAAI,EAEChC,EAAI,EAAO,EAAJA,EAAOA,GAAQ,EAC3B+B,GAASlG,EAAIsE,OAAOH,GACpBgC,GAAK5B,KAAKC,MAAM0B,EAAQ,GAAe,EAARA,EAAa,EAKhD,KAAK,GADDE,GAAI,EACCxB,EAAI,EAAO,EAAJA,EAAOA,GAAQ,EAC3BwB,IAAMpG,EAAIsE,OAAOM,EAGrB,IAAIa,IAAc,IAAMU,EAAIC,GAAK,IAAM,EAKvC,OAFAzF,IAAUX,EAAIyE,MAAM,EAAG,IAEhBgB,IAAe9E,GAE1B6C,SAAU,SAAUxD,EAAKI,GAGrB,IAAK,GAFDiE,GAAQ,EAEHF,EAAI,EAAO,EAAJA,EAAOA,IACnBE,IAAUrE,EAAIsE,OAAOH,GAAKtD,EAAWT,GAAaW,YAAYoD,EAYlE,OARAE,GAAQ,GAAKA,EAAQ,GACP,KAAVA,IACAA,EAAQ,GAKZ1D,GAAUX,EAAIyE,MAAM,EAAG,KACH,KAAVJ,GAAgBA,IAAU1D,IAExC8C,kBAAmB,SAAUzD,GACzB,GAAIW,GAAS,EACT8E,EAAczF,EAAM,EAGxB,OAAOyF,KAAe9E,GAM9B,OAFsB,gBAAXf,SAAuBA,OAAO+D,UAAS/D,OAAO+D,QAAUA,GAE5DA,IAGV,OAAO7D","file":"angular-jsvat.min.js","sourcesContent":["angular.module('jsvat', [])\n\r    .factory('JsVatFactory', function () {\n\rvar jsvat = (function () {\n    'use strict';\n\n    var CONDITIONS = {\n        austria: {\n            multipliers: [1, 2, 1, 2, 1, 2, 1],\n            regex: /^(AT)U(\\d{8})$/\n        },\n        belgium: {\n            regex: /^(BE)(0?\\d{9})$/\n        },\n        bulgaria: {\n            multipliers: {\n                physical: [2, 4, 8, 5, 10, 9, 7, 3, 6],\n                foreigner: [21, 19, 17, 13, 11, 9, 7, 3, 1],\n                miscellaneous: [4, 3, 2, 7, 6, 5, 4, 3, 2]\n            },\n            regex: /^(BG)(\\d{9,10})$/\n        },\n        switzerland: {\n            multipliers: [5, 4, 3, 2, 7, 6, 5, 4],\n            regex: /^(CHE)(\\d{9})(MWST)?$/\n        },\n        cyprus: {\n            regex: /^(CY)([0-59]\\d{7}[A-Z])$/\n        },\n        czech_republic: {\n            multipliers: [8, 7, 6, 5, 4, 3, 2],\n            lookup: [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 10],\n            regex: /^(CZ)(\\d{8,10})(\\d{3})?$/,\n            additional: [\n                /^\\d{8}$/,\n                /^[0-5][0-9][0|1|5|6]\\d[0-3]\\d\\d{3}$/,\n                /^6\\d{8}$/,\n                /^\\d{2}[0-3|5-8]\\d[0-3]\\d\\d{4}$/\n            ]\n        },\n        germany: {\n            regex: /^(DE)([1-9]\\d{8})$/\n        },\n        denmark: {\n            multipliers: [2, 7, 6, 5, 4, 3, 2, 1],\n            regex: /^(DK)(\\d{8})$/\n        },\n        estonia: {\n            multipliers: [3, 7, 1, 3, 7, 1, 3, 7],\n            regex: /^(EE)(10\\d{7})$/\n        },\n        greece: {\n            multipliers: [256, 128, 64, 32, 16, 8, 4, 2],\n            regex: /^(EL)(\\d{9})$/\n        },\n        spain: {\n            multipliers: [2, 1, 2, 1, 2, 1, 2],\n            regex: [\n                /^(ES)([A-Z]\\d{8})$/,\n                /^(ES)([A-HN-SW]\\d{7}[A-J])$/,\n                /^(ES)([0-9YZ]\\d{7}[A-Z])$/,\n                /^(ES)([KLMX]\\d{7}[A-Z])$/\n            ],\n            additional: [\n                /^[A-H|J|U|V]\\d{8}$/,\n                /^[A-H|N-S|W]\\d{7}[A-J]$/,\n                /^[0-9|Y|Z]\\d{7}[A-Z]$/,\n                /^[K|L|M|X]\\d{7}[A-Z]$/\n            ]\n        },\n        europe: {\n            regex: /^(EU)(\\d{9})$/\n        },\n        finland: {\n            multipliers: [7, 9, 10, 5, 8, 4, 2],\n            regex: /^(FI)(\\d{8})$/\n        },\n        france: {\n            regex: [\n                /^(FR)(\\d{11})$/,\n                /^(FR)([A-HJ-NP-Z]\\d{10})$/,\n                /^(FR)(\\d[A-HJ-NP-Z]\\d{9})$/,\n                /^(FR)([A-HJ-NP-Z]{2}\\d{9})$/\n            ]\n\n        },\n        united_kingdom: {\n            multipliers: [8, 7, 6, 5, 4, 3, 2],\n            regex: [\n                /^(GB)?(\\d{9})$/,\n                /^(GB)?(\\d{12})$/,\n                /^(GB)?(GD\\d{3})$/,\n                /^(GB)?(HA\\d{3})$/\n            ]\n\n        },\n        croatia: {\n            regex: /^(HR)(\\d{11})$/\n        },\n        hungary: {\n            multipliers: [9, 7, 3, 1, 9, 7, 3],\n            regex: /^(HU)(\\d{8})$/\n        },\n        ireland: {\n            multipliers: [8, 7, 6, 5, 4, 3, 2],\n            regex: [\n                /^(IE)(\\d{7}[A-W])$/,\n                /^(IE)([7-9][A-Z\\*\\+)]\\d{5}[A-W])$/,\n                /^(IE)(\\d{7}[A-W][AH])$/\n            ]\n\n        },\n        italy: {\n            multipliers: [1, 2, 1, 2, 1, 2, 1, 2, 1, 2],\n            regex: /^(IT)(\\d{11})$/\n        },\n        latvia: {\n            multipliers: [9, 1, 4, 8, 3, 10, 2, 5, 7, 6],\n            regex: /^(LV)(\\d{11})$/\n        },\n        lithunia: {\n            multipliers: {\n                short: [3, 4, 5, 6, 7, 8, 9, 1],\n                med: [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2],\n                alt: [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4]\n            },\n            regex: /^(LT)(\\d{9}|\\d{12})$/\n        },\n        luxembourg: {\n            regex: /^(LU)(\\d{8})$/\n        },\n        malta: {\n            multipliers: [3, 4, 6, 7, 8, 9],\n            regex: /^(MT)([1-9]\\d{7})$/\n        },\n        netherlands: {\n            multipliers: [9, 8, 7, 6, 5, 4, 3, 2],\n            regex: /^(NL)(\\d{9})B\\d{2}$/\n        },\n        norway: {\n            multipliers: [3, 2, 7, 6, 5, 4, 3, 2],\n            regex: /^(NO)(\\d{9})$/\n        },\n        poland: {\n            multipliers: [6, 5, 7, 2, 3, 4, 5, 6, 7],\n            regex: /^(PL)(\\d{10})$/\n        },\n        portugal: {\n            multipliers: [9, 8, 7, 6, 5, 4, 3, 2],\n            regex: /^(PT)(\\d{9})$/\n        },\n        romania: {\n            multipliers: [7, 5, 3, 2, 1, 7, 5, 3, 2],\n            regex: /^(RO)([1-9]\\d{1,9})$/\n        },\n        russia: {\n            multipliers: {\n                m_1: [2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n                m_2: [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n                m_3: [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0]\n            },\n            regex: /^(RU)(\\d{10}|\\d{12})$/\n        },\n        serbia: {\n            regex: /^(RS)(\\d{9})$/\n        },\n        slovenia: {\n            multipliers: [8, 7, 6, 5, 4, 3, 2],\n            regex: /^(SI)([1-9]\\d{7})$/\n        },\n        slovakia_republic: {\n            regex: /^(SK)([1-9]\\d[2346-9]\\d{7})$/\n        },\n        sweden: {\n            regex: /^(SE)(\\d{10}01)$/\n        }\n    };\n\n    function _validateRegex(vat, regex) {\n        return regex.test(vat);\n    }\n\n    function _validateRules(vat, regex, countryName) {\n        var parsedNum = regex.exec(vat);\n\n        //var code = parsedNum[1];\n        var number = parsedNum[2];\n        //if (!code || code.length === 0) code = 'GB';\n\n        return _checks[countryName](number, countryName);\n    }\n\n    function _validate(vat, regex, countryName) {\n        var result = false;\n        if (_validateRegex(vat, regex)) {\n            result = _validateRules(vat, regex, countryName);\n        }\n        return result;\n    }\n\n    var exports = {\n        checkVAT: function (vat) {\n            if (!vat) return false;\n            vat = vat.toString().toUpperCase().replace(/(\\s|-|\\.)+/g, '');\n\n            for (var countryName in CONDITIONS) {\n                if (CONDITIONS.hasOwnProperty(countryName)) {\n                    var regex = CONDITIONS[countryName].regex;\n\n                    //TODO (S.Panfilov) this is not cross-browser check\n                    if (Array.isArray(regex)) {\n                        for (var i = 0; i < regex.length; i++) {\n                            if (_validate(vat, regex[i], countryName)) return true;\n                        }\n                    } else {\n                        if (_validate(vat, regex, countryName)) return true;\n                    }\n                }\n            }\n            return false;\n\n        }\n    };\n\n    var expect;\n    var temp;\n\n    var _checks = {\n        austria: function (vat, countryName) {\n            var total = 0;\n            for (var i = 0; i < 7; i++) {\n                temp = vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n                if (temp > 9)\n                    total += Math.floor(temp / 10) + temp % 10;\n                else\n                    total += temp;\n            }\n\n            total = 10 - (total + 4) % 10;\n            if (total === 10) total = 0;\n\n            expect = +vat.slice(7, 8);\n\n            return total === expect;\n        },\n        belgium: function (vat) {\n            if (vat.length === 9) {\n                vat = '0' + vat;\n            }\n\n            if (+vat.slice(1, 2) === 0) return false;\n\n            var check = (97 - +vat.slice(0, 8) % 97);\n            expect = +vat.slice(8, 10);\n            return check === expect;\n        },\n        bulgaria: function (vat, countryName) {\n            var checkNineLengthVat = function () {\n                var total =0;\n                temp = 0;\n                for (var i = 0; i < 8; i++) {\n                    temp += +vat.charAt(i) * (i + 1);\n                }\n\n                total = temp % 11;\n                if (total !== 10) {\n                    expect = +vat.slice(8);\n                    return total === expect;\n                }\n\n                temp = 0;\n                for (var j = 0; j < 8; j++) {\n                    temp += +vat.charAt(j) * (j + 3);\n                }\n\n                total = temp % 11;\n                if (total === 10) total = 0;\n                expect = +vat.slice(8);\n\n                return total === expect;\n            };\n\n            var isPhysicalPerson = function () {\n                var total = 0;\n                // 10 digit VAT code - see if it relates to a standard physical person\n                if ((/^\\d\\d[0-5]\\d[0-3]\\d\\d{4}$/).test(vat)) {\n                    // Check month\n                    var month = +vat.slice(2, 4);\n                    if ((month > 0 && month < 13) || (month > 20 && month < 33) || (month > 40 && month < 53)) {\n\n                        total = 0;\n                        for (var k = 0; k < 9; k++) {\n                            total += +vat.charAt(k) * CONDITIONS[countryName].multipliers.physical[k];\n                        }\n                        // Establish check digit.\n                        total = total % 11;\n                        if (total === 10) total = 0;\n\n                        // Check to see if the check digit given is correct, If not, try next type of person\n                        if (total === +vat.substr(9, 1)) return true;\n                    }\n                }\n\n                return false;\n\n            };\n\n            // It doesn't relate to a standard physical person - see if it relates to a foreigner.\n            var isForeigner = function () {\n                var total = 0;\n                // Extract the next digit and multiply by the counter.\n                for (var l = 0; l < 9; l++) {\n                    total += +vat.charAt(l) * CONDITIONS[countryName].multipliers.foreigner[l];\n                }\n\n                // Check to see if the check digit given is correct, If not, try next type of person\n                if (total % 10 === +vat.substr(9, 1)) {\n                    return true;\n                }\n            };\n\n            var miscellaneousVAT = function () {\n                var total = 0;\n                // Finally, if not yet identified, see if it conforms to a miscellaneous VAT number\n\n                for (var m = 0; m < 9; m++) {\n                    total += +vat.charAt(m) * CONDITIONS[countryName].multipliers.miscellaneous[m];\n                }\n\n                // Establish check digit.\n                total = 11 - total % 11;\n                if (total === 10) return false;\n                if (total === 11) total = 0;\n\n                // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n                expect = +vat.substr(9, 1);\n                return total === expect;\n            };\n\n            if (vat.length === 9) {\n                return checkNineLengthVat();\n            } else {\n                return isPhysicalPerson() || isForeigner() || miscellaneousVAT();\n            }\n\n        },\n        switzerland: function (vat, countryName) {\n            var total = 0;\n            for (var i = 0; i < 8; i++) {\n                total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n            }\n\n            // Establish check digit.\n            total = 11 - total % 11;\n            if (total === 10) return false;\n            if (total === 11) total = 0;\n\n            // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n            expect = +vat.substr(8, 1);\n            return total === expect;\n        },\n        cyprus: function (vat) {\n            var total = 0;\n            // Not allowed to start with '12'\n            if (+vat.slice(0, 2) === 12) return false;\n\n            // Extract the next digit and multiply by the counter.\n\n            for (var i = 0; i < 8; i++) {\n                var temp = +vat.charAt(i);\n                if (i % 2 === 0) {\n                    switch (temp) {\n                        case 0:\n                            temp = 1;\n                            break;\n                        case 1:\n                            temp = 0;\n                            break;\n                        case 2:\n                            temp = 5;\n                            break;\n                        case 3:\n                            temp = 7;\n                            break;\n                        case 4:\n                            temp = 9;\n                            break;\n                        default:\n                            temp = temp * 2 + 3;\n                    }\n                }\n                total += temp;\n            }\n\n            // Establish check digit using modulus 26, and translate to char. equivalent.\n            total = total % 26;\n            total = String.fromCharCode(total + 65);\n\n            // Check to see if the check digit given is correct\n            expect = vat.substr(8, 1);\n            return total === expect;\n        },\n        czech_republic: function (vat, countryName) {\n            var total = 0;\n\n            // Legal entities\n            if (CONDITIONS[countryName].additional[0].test(vat)) {\n\n                // Extract the next digit and multiply by the counter.\n                for (var i = 0; i < 7; i++) {\n                    total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n                }\n\n                // Establish check digit.\n                total = 11 - total % 11;\n                if (total === 10) total = 0;\n                if (total === 11) total = 1;\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = +vat.slice(7, 8);\n                return total === expect;\n            }\n\n            // Individuals type 2\n            else if (CONDITIONS[countryName].additional[2].test(vat)) {\n\n                // Extract the next digit and multiply by the counter.\n                for (var j = 0; j < 7; j++) {\n                    total += +vat.charAt(j + 1) * CONDITIONS[countryName].multipliers[j];\n                }\n\n                // Establish check digit.\n                total = 11 - total % 11;\n                if (total === 10) total = 0;\n                if (total === 11) total = 1;\n\n                // Convert calculated check digit according to a lookup table;\n                expect = +vat.slice(8, 9);\n                return CONDITIONS[countryName].lookup[total - 1] === expect;\n            }\n\n            // Individuals type 3\n            else if (CONDITIONS[countryName].additional[3].test(vat)) {\n                var temp = +vat.slice(0, 2) + vat.slice(2, 4) + vat.slice(4, 6) + vat.slice(6, 8) + vat.slice(8);\n                expect = +vat % 11 === 0;\n                return !!(temp % 11 === 0 && expect);\n            }\n\n            // else error\n            return false;\n        },\n        germany: function (vat) {\n\n\n            // Checks the check digits of a German VAT number.\n\n            var product = 10;\n            var sum = 0;\n            var checkDigit = 0;\n            for (var i = 0; i < 8; i++) {\n\n                // Extract the next digit and implement peculiar algorithm!.\n                sum = (+vat.charAt(i) + product) % 10;\n                if (sum === 0) {\n                    sum = 10;\n                }\n                product = (2 * sum) % 11;\n            }\n\n            // Establish check digit.\n            if (11 - product === 10) {\n                checkDigit = 0;\n            } else {\n                checkDigit = 11 - product;\n            }\n\n            // Compare it with the last two characters of the VAT number. If the same, then it is a valid\n            // check digit.\n            expect = +vat.slice(8, 9);\n            return checkDigit === expect;\n        },\n        denmark: function (vat, countryName) {\n            var total = 0;\n            for (var i = 0; i < 8; i++) {\n                total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n            }\n\n            return total % 11 === 0;\n        },\n        estonia: function (vat, countryName) {\n            var total = 0;\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) {\n                total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n            }\n\n            // Establish check digits using modulus 10.\n            total = 10 - total % 10;\n            if (total === 10) total = 0;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(8, 9);\n            return total === expect;\n        },\n        greece: function (vat, countryName) {\n            var total = 0;\n            //eight character numbers should be prefixed with an 0.\n            if (vat.length === 8) {\n                vat = '0' + vat;\n            }\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) {\n                total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n            }\n\n            // Establish check digit.\n            total = total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(8, 9);\n            return total === expect;\n        },\n        spain: function (vat, countryName) {\n            var i = 0;\n            var total = 0;\n\n            // National juridical entities\n            if (CONDITIONS[countryName].additional[0].test(vat)) {\n\n                // Extract the next digit and multiply by the counter.\n                for (i = 0; i < 7; i++) {\n                    temp = vat.charAt(i + 1) * CONDITIONS[countryName].multipliers[i];\n                    if (temp > 9)\n                        total += Math.floor(temp / 10) + temp % 10;\n                    else\n                        total += temp;\n                }\n                // Now calculate the check digit itself.\n                total = 10 - total % 10;\n                if (total === 10) {\n                    total = 0;\n                }\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = +vat.slice(8, 9);\n                return total === expect;\n            }\n\n            // Juridical entities other than national ones\n            else if (CONDITIONS[countryName].additional[1].test(vat)) {\n\n                // Extract the next digit and multiply by the counter.\n                for (i = 0; i < 7; i++) {\n                    temp = vat.charAt(i + 1) * CONDITIONS[countryName].multipliers[i];\n                    if (temp > 9)\n                        total += Math.floor(temp / 10) + temp % 10;\n                    else\n                        total += temp;\n                }\n\n                // Now calculate the check digit itself.\n                total = 10 - total % 10;\n                total = String.fromCharCode(total + 64);\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = vat.slice(8, 9);\n                return total === expect;\n            }\n\n            // Personal number (NIF) (starting with numeric of Y or Z)\n            else if (CONDITIONS[countryName].additional[2].test(vat)) {\n                var tempnumber = vat;\n                if (tempnumber.substring(0, 1) === 'Y') tempnumber = tempnumber.replace(/Y/, '1');\n                if (tempnumber.substring(0, 1) === 'Z') tempnumber = tempnumber.replace(/Z/, '2');\n                expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+tempnumber.substring(0, 8) % 23);\n                return tempnumber.charAt(8) === expect;\n            }\n\n            // Personal number (NIF) (starting with K, L, M, or X)\n            else if (CONDITIONS[countryName].additional[3].test(vat)) {\n                expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+vat.substring(1, 8) % 23);\n                return vat.charAt(8) === expect;\n            }\n\n            else return false;\n        },\n        europe: function () {\n            //TODO (S.Panfilov) wtf?\n            // We know little about EU numbers apart from the fact that the first 3 digits represent the\n            // country, and that there are nine digits in total.\n            return true;\n        },\n        finland: function (vat, countryName) {\n            var total = 0;\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n\n            // Establish check digit.\n            total = 11 - total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(7, 8);\n            return total === expect;\n        },\n        france: function (vat) {\n            var total;\n            // Checks the check digits of a French VAT number.\n            if (!(/^\\d{11}$/).test(vat)) {\n                return true;\n            }\n\n            // Extract the last nine digits as an integer.\n            total = +vat.substring(2);\n\n            // Establish check digit.\n            total = (total * 100 + 12) % 97;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(0, 2);\n            return total === expect;\n        },\n        united_kingdom: function (vat, countryName) {\n            var total = 0;\n            // Government departments\n            if (vat.substr(0, 2) === 'GD') {\n                expect = 500;\n                return vat.substr(2, 3) < expect;\n            }\n\n            // Health authorities\n            if (vat.substr(0, 2) === 'HA') {\n                expect = 499;\n                return vat.substr(2, 3) > expect;\n            }\n\n            // Standard and commercial numbers\n\n\n            // 0 VAT numbers disallowed!\n            if (+vat.slice(0) === 0) return false;\n\n            // Check range is OK for modulus 97 calculation\n            var no = +vat.slice(0, 7);\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) {\n                total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n            }\n\n            // Old numbers use a simple 97 modulus, but new numbers use an adaptation of that (less 55). Our\n            // VAT number could use either system, so we check it against both.\n\n            // Establish check digits by subtracting 97 from total until negative.\n            var checkDigit = total;\n            while (checkDigit > 0) {\n                checkDigit = checkDigit - 97;\n            }\n\n            // Get the absolute value and compare it with the last two characters of the VAT number. If the\n            // same, then it is a valid traditional check digit. However, even then the number must fit within\n            // certain specified ranges.\n            checkDigit = Math.abs(checkDigit);\n            if (checkDigit === +vat.slice(7, 9) && no < 9990001 && (no < 100000 || no > 999999) && (no < 9490001 || no > 9700000)) return true;\n\n            // Now try the new method by subtracting 55 from the check digit if we can - else add 42\n            if (checkDigit >= 55)\n                checkDigit = checkDigit - 55;\n            else\n                checkDigit = checkDigit + 42;\n            expect = +vat.slice(7, 9);\n            return !!(checkDigit === expect && no > 1000000);\n        },\n        croatia: function (vat) {\n\n\n            // Checks the check digits of a Croatian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n            var product = 10;\n            var sum = 0;\n\n            for (var i = 0; i < 10; i++) {\n\n                // Extract the next digit and implement the algorithm\n                sum = (+vat.charAt(i) + product) % 10;\n                if (sum === 0) {\n                    sum = 10;\n                }\n\n                product = (2 * sum) % 11;\n            }\n\n            // Now check that we have the right check digit\n            expect = +vat.slice(10, 11);\n            return (product + expect) % 10 === 1;\n        },\n        hungary: function (vat, countryName) {\n            var total = 0;\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) {\n                total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n            }\n\n            // Establish check digit.\n            total = 10 - total % 10;\n            if (total === 10) total = 0;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(7, 8);\n            return total === expect;\n        },\n        ireland: function (vat, countryName) {\n            var total = 0;\n            // If the code is type 1 format, we need to convert it to the new before performing the validation.\n            if (/^\\d[A-Z\\*\\+]/.test(vat)) {\n                vat = '0' + vat.substring(2, 7) + vat.substring(0, 1) + vat.substring(7, 8);\n            }\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) {\n                total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n            }\n\n            // If the number is type 3 then we need to include the trailing A or H in the calculation\n            if (/^\\d{7}[A-Z][AH]$/.test(vat)) {\n                // Add in a multiplier for the character A (1*9=9) or H (8*9=72)\n                if (vat.charAt(8) === 'H') {\n                    total += 72;\n                } else {\n                    total += 9;\n                }\n            }\n\n            // Establish check digit using modulus 23, and translate to char. equivalent.\n            total = total % 23;\n            if (total === 0) {\n                total = 'W';\n            } else {\n                total = String.fromCharCode(total + 64);\n            }\n\n            // Compare it with the eighth character of the VAT number. If it's the same, then it's valid.\n            expect = vat.slice(7, 8);\n            return total === expect;\n        },\n        italy: function (vat, countryName) {\n            var total = 0;\n            // The last three digits are the issuing office, and cannot exceed more 201, unless 999 or 888\n            if (+vat.slice(0, 7) === 0) {\n                return false;\n            }\n\n            temp = +vat.slice(7, 10);\n            if ((temp < 1) || (temp > 201) && temp !== 999 && temp !== 888) {\n                return false;\n            }\n\n            // Extract the next digit and multiply by the appropriate\n            for (var i = 0; i < 10; i++) {\n                temp = +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n                if (temp > 9)\n                    total += Math.floor(temp / 10) + temp % 10;\n                else\n                    total += temp;\n            }\n\n            // Establish check digit.\n            total = 10 - total % 10;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(10, 11);\n            return total === expect;\n        },\n        lithunia: function (vat, countryName) {\n            var total = 0;\n            // 9 character VAT numbers are for legal persons\n            if (vat.length === 9) {\n\n                // 8th character must be one\n                if (!(/^\\d{7}1/).test(vat)) return false;\n\n                // Extract the next digit and multiply by the counter+1.\n                total = 0;\n                for (var i = 0; i < 8; i++) {\n                    total += +vat.charAt(i) * (i + 1);\n                }\n\n                // Can have a double check digit calculation!\n                if (total % 11 === 10) {\n                    total = 0;\n                    for (var j = 0; j < 8; j++) {\n                        total += +vat.charAt(j) * CONDITIONS[countryName].multipliers.short[j];\n                    }\n                }\n\n                // Establish check digit.\n                total = total % 11;\n                if (total === 10) {\n                    total = 0;\n                }\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = +vat.slice(8, 9);\n                return total === expect;\n            }\n\n            // 12 character VAT numbers are for temporarily registered taxpayers\n            else {\n\n                // 11th character must be one\n                if (!(/^\\d{10}1/).test(vat)) return false;\n\n                // Extract the next digit and multiply by the counter+1.\n                total = 0;\n                for (var k = 0; k < 11; k++) {\n                    total += +vat.charAt(k) * CONDITIONS[countryName].multipliers.med[k];\n                }\n\n                // Can have a double check digit calculation!\n                if (total % 11 === 10) {\n                    total = 0;\n                    for (var l = 0; l < 11; l++) {\n                        total += +vat.charAt(l) * CONDITIONS[countryName].multipliers.alt[l];\n                    }\n                }\n\n                // Establish check digit.\n                total = total % 11;\n                if (total === 10) {\n                    total = 0;\n                }\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = +vat.slice(11, 12);\n                return total === expect;\n            }\n        },\n        luxembourg: function (vat) {\n            var expect = +vat.slice(6, 8);\n            var checkDigit = +vat.slice(0, 6) % 89;\n            // Checks the check digits of a Luxembourg VAT number.\n\n            return checkDigit === expect;\n        },\n        latvia: function (vat, countryName) {\n            var total = 0;\n\n            // Differentiate between legal entities and natural bodies. For the latter we simply check that\n            // the first six digits correspond to valid DDMMYY dates.\n            if ((/^[0-3]/).test(vat)) {\n                return !!(/^[0-3][0-9][0-1][0-9]/).test(vat);\n            } else {\n\n                // Extract the next digit and multiply by the counter.\n                for (var i = 0; i < 10; i++) {\n                    total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n                }\n\n                // Establish check digits by getting modulus 11.\n                if (total % 11 === 4 && vat[0] === 9) total = total - 45;\n                if (total % 11 === 4)\n                    total = 4 - total % 11;\n                else if (total % 11 > 4)\n                    total = 14 - total % 11;\n                else if (total % 11 < 4)\n                    total = 3 - total % 11;\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = +vat.slice(10, 11);\n                return total === expect;\n            }\n        },\n        malta: function (vat, countryName) {\n            var total = 0;\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 6; i++) {\n                total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n            }\n\n            // Establish check digits by getting modulus 37.\n            total = 37 - total % 37;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(6, 8);\n            return total === expect;\n        },\n        netherlands: function (vat, countryName) {\n            var total = 0;\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) {\n                total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n            }\n\n            // Establish check digits by getting modulus 11.\n            total = total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(8, 9);\n            return total === expect;\n        },\n        norway: function (vat, countryName) {\n            var total = 0;\n            // See http://www.brreg.no/english/coordination/number.html\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) {\n                total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n            }\n\n            // Establish check digits by getting modulus 11. Check digits > 9 are invalid\n            total = 11 - total % 11;\n            if (total === 11) {\n                total = 0;\n            }\n            if (total < 10) {\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = +vat.slice(8, 9);\n                return total === expect;\n            }\n        },\n        poland: function (vat, countryName) {\n            var total = 0;\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 9; i++) {\n                total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n            }\n\n            // Establish check digits subtracting modulus 11 from 11.\n            total = total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(9, 10);\n            return total === expect;\n        },\n        portugal: function (vat, countryName) {\n            var total = 0;\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) {\n                total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n            }\n\n            // Establish check digits subtracting modulus 11 from 11.\n            total = 11 - total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(8, 9);\n            return total === expect;\n        },\n        romania: function (vat, countryName) {\n            var total = 0;\n            // Extract the next digit and multiply by the counter.\n            var vatLength = vat.length;\n            var multipliers = CONDITIONS[countryName].multipliers.slice(10 - vatLength);\n\n            for (var i = 0; i < vat.length - 1; i++) {\n                total += +vat.charAt(i) * multipliers[i];\n            }\n\n            // Establish check digits by getting modulus 11.\n            total = (10 * total) % 11;\n            if (total === 10) total = 0;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(vat.length - 1, vat.length);\n            return total === expect;\n        },\n        serbia: function (vat) {\n            // Checks the check digits of a Serbian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n            var product = 10;\n            var sum = 0;\n            var checkDigit;\n\n            for (var i = 0; i < 8; i++) {\n\n                // Extract the next digit and implement the algorithm\n                sum = (+vat.charAt(i) + product) % 10;\n                if (sum === 0) {\n                    sum = 10;\n                }\n                product = (2 * sum) % 11;\n            }\n\n            // Now check that we have the right check digit\n            expect = 1;\n            checkDigit = (product + (+vat.slice(8, 9))) % 10;\n            return checkDigit === expect;\n        },\n        russia: function (vat, countryName) {\n            var total = 0;\n            var expect2;\n\n            // Checks the check digits of a Russian INN number\n            // See http://russianpartner.biz/test_inn.html for algorithm\n\n            // 10 digit INN numbers\n            if (vat.length === 10) {\n\n                for (var i = 0; i < 10; i++) {\n                    total += +vat.charAt(i) * CONDITIONS[countryName].multipliers.m_1[i];\n                }\n\n                total = total % 11;\n                if (total > 9) {\n                    total = total % 10;\n                }\n\n                // Compare it with the last character of the VAT number. If it is the same, then it's valid\n                expect = +vat.slice(9, 10);\n                return total === expect;\n\n                // 12 digit INN numbers\n            } else if (vat.length === 12) {\n                var total1 = 0;\n                var total2 = 0;\n\n                for (var j = 0; j < 11; j++) {\n                    total1 += +vat.charAt(j) * CONDITIONS[countryName].multipliers.m_2[j];\n                }\n\n                total1 = total1 % 11;\n                if (total1 > 9) {\n                    total1 = total1 % 10;\n                }\n\n                for (var k = 0; k < 11; k++) {\n                    total2 += +vat.charAt(k) * CONDITIONS[countryName].multipliers.m_3[k];\n                }\n\n                total2 = total2 % 11;\n                if (total2 > 9) {\n                    total2 = total2 % 10;\n                }\n\n                // Compare the first check with the 11th character and the second check with the 12th and last\n                // character of the VAT number. If they're both the same, then it's valid\n                //expect = +vat.slice(10, 11);\n                expect = (total1 === +vat.slice(10, 11));\n                //expect2 = +vat.slice(11, 12);\n                expect2 = (total2 === +vat.slice(11, 12));\n                return (expect) && (expect2);\n            }\n        },\n        sweden: function (vat) {\n            // Calculate R where R = R1 + R3 + R5 + R7 + R9, and Ri = INT(Ci/5) + (Ci*2) modulo 10\n            var R = 0;\n            var digit;\n            for (var i = 0; i < 9; i = i + 2) {\n                digit = +vat.charAt(i);\n                R += Math.floor(digit / 5) + ((digit * 2) % 10);\n            }\n\n            // Calculate S where S = C2 + C4 + C6 + C8\n            var S = 0;\n            for (var j = 1; j < 9; j = j + 2) {\n                S += +vat.charAt(j);\n            }\n\n            var checkDigit = (10 - (R + S) % 10) % 10;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(9, 10);\n\n            return checkDigit === expect;\n        },\n        slovenia: function (vat, countryName) {\n            var total = 0;\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) {\n                total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n            }\n\n            // Establish check digits using modulus 11\n            total = 11 - total % 11;\n            if (total === 10) {\n                total = 0;\n            }\n\n            // Compare the number with the last character of the VAT number. If it is the\n            // same, then it's a valid check digit.\n            expect = +vat.slice(7, 8);\n            return !!(total !== 11 && total === expect);\n        },\n        slovakia_republic: function (vat) {\n            var expect = 0;\n            var checkDigit = (vat % 11);\n            // Checks the check digits of a Slovakian VAT number.\n            // Check that the modulus of the whole VAT number is 0 - else error\n            return checkDigit === expect;\n        }\n    };\n\n    if (typeof module === 'object' && module.exports) module.exports = exports;\n\n    return exports;\n})();\n\r return jsvat;});"],"sourceRoot":"/source/"}