{"version":3,"sources":["angular-jsvat.js"],"names":["angular","module","factory","jsvat","_validateRegex","vat","regex","test","_validateRules","countryName","parsedNum","exec","vatNum","COUNTRIES","calcs","_validate","result","_getPureVAT","toString","toUpperCase","replace","_isCountryBlocked","config","length","indexOf","checkValidity","regexArr","rules","i","isValid","exports","checkVAT","value","country","hasOwnProperty","austria","temp","total","charAt","this","multipliers","Math","floor","slice","belgium","check","bulgaria","_checkNineLengthVat","expect","j","_isPhysicalPerson","month","physical","substr","_isForeigner","foreigner","_miscellaneousVAT","miscellaneous","croatia","product","sum","cyprus","String","fromCharCode","czech_republic","_isLegalEntities","additional","_isIndividualType2","lookup","_isIndividualType3","denmark","estonia","europe","finland","france","substring","germany","checkDigit","greece","hungary","ireland","typeFormats","first","third","italy","latvia","lithunia","_extractDigit","multiplier","key","_doubleCheckCalculation","extractDigit","_check9DigitVat","extractDigit12","k","med","_doubleCheckCalculation12","l","alt","_check12DigitVat","short","luxembourg","malta","netherlands","norway","poland","portugal","romania","vatLength","russia","_check10DigitINN","m_1","_check12DigitINN","total1","total2","m_2","m_3","expect2","serbia","slovakia_republic","slovenia","spain","tempnumber","sweden","digit","R","S","switzerland","united_kingdom","no","abs","directive","JsVatFactory","restrict","scope","require","link","element","makeObj","name","isObject","setValidity","addClass","valid","removeClass","invalid","modelController","$setValidity","controller","isEmpty","$watch","$modelValue","val"],"mappings":"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","file":"angular-jsvat.min.js","sourcesContent":["angular.module('angular-jsvat', ['angular-jsvat-input'])\n\n.factory('JsVatFactory', function() {\n\n  var jsvat = (function() {\n\n    'use strict';\n\n    var COUNTRIES = {};\n\n    function _validateRegex(vat, regex) {\n      return regex.test(vat);\n    }\n\n    function _validateRules(vat, regex, countryName) {\n      var parsedNum = regex.exec(vat);\n      var vatNum = parsedNum[2];\n\n      return COUNTRIES[countryName].calcs(vatNum);\n    }\n\n    function _validate(vat, regex, countryName) {\n      var result = false;\n      if (_validateRegex(vat, regex)) {\n        result = _validateRules(vat, regex, countryName);\n      }\n      return result;\n    }\n\n    function _getPureVAT(vat) {\n      vat = vat || '';\n      return vat.toString().toUpperCase().replace(/(\\s|-|\\.)+/g, '');\n    }\n\n    function _isCountryBlocked(config, countryName) {\n      if (!config || config.length === 0) return false;\n\n      return config.indexOf(countryName) === -1;\n    }\n\n    function checkValidity(vat, countryName) {\n      var regexArr = COUNTRIES[countryName].rules.regex;\n      for (var i = 0; i < regexArr.length; i++) {\n        var isValid = _validate(vat, regexArr[i], countryName);\n        if (isValid) return isValid && !_isCountryBlocked(exports.config, countryName);\n      }\n      return false;\n    }\n\n    var exports = {\n      config: [],\n      checkVAT: function(vat) {\n        var result = {\n          value: _getPureVAT(vat),\n          isValid: false,\n          country: null\n        };\n\n        if (!vat) return result;\n\n        for (var countryName in COUNTRIES) {\n          if (COUNTRIES.hasOwnProperty(countryName)) {\n\n            result.isValid = checkValidity(result.value, countryName);\n\n            if (result.isValid) {\n              result.country = countryName;\n              return result;\n            }\n          }\n        }\n\n        return result;\n\n      }\n    };\n    COUNTRIES.austria = {\n      calcs: function(vat) {\n        var total = 0;\n        var temp;\n\n        for (var i = 0; i < 7; i++) {\n          temp = vat.charAt(i) * this.rules.multipliers[i];\n\n          if (temp > 9) {\n            total += Math.floor(temp / 10) + temp % 10;\n          } else {\n            total += temp;\n          }\n        }\n\n        total = 10 - (total + 4) % 10;\n        if (total === 10) total = 0;\n\n        return total === +vat.slice(7, 8);\n      },\n      rules: {\n        multipliers: [\n          1,\n          2,\n          1,\n          2,\n          1,\n          2,\n          1\n        ],\n        regex: [/^(AT)U(\\d{8})$/]\n      }\n    };\n    COUNTRIES.belgium = {\n      calcs: function(vat) {\n        if (vat.length === 9) {\n          vat = '0' + vat;\n        }\n\n        if (+vat.slice(1, 2) === 0) return false;\n\n        var check = (97 - +vat.slice(0, 8) % 97);\n        return check === +vat.slice(8, 10);\n      },\n      rules: {\n        regex: [/^(BE)(0?\\d{9})$/]\n      }\n    };\n    COUNTRIES.bulgaria = (function() {\n\n      function _checkNineLengthVat(vat) {\n        var total;\n        var temp = 0;\n        var expect = +vat.slice(8);\n\n        for (var i = 0; i < 8; i++) {\n          temp += +vat.charAt(i) * (i + 1);\n        }\n\n        total = temp % 11;\n        if (total !== 10) {\n          return total === expect;\n        }\n\n        temp = 0;\n        for (var j = 0; j < 8; j++) {\n          temp += +vat.charAt(j) * (j + 3);\n        }\n\n        total = temp % 11;\n        if (total === 10) total = 0;\n\n        return total === expect;\n      }\n\n      function _isPhysicalPerson(vat, rules) {\n        var total = 0;\n        // 10 digit VAT code - see if it relates to a standard physical person\n        if ((/^\\d\\d[0-5]\\d[0-3]\\d\\d{4}$/).test(vat)) {\n          // Check month\n          var month = +vat.slice(2, 4);\n          if ((month > 0 && month < 13) || (month > 20 && month < 33) || (month > 40 && month < 53)) {\n\n            total = 0;\n            for (var i = 0; i < 9; i++) {\n              total += +vat.charAt(i) * rules.multipliers.physical[i];\n            }\n            // Establish check digit.\n            total = total % 11;\n            if (total === 10) total = 0;\n\n            // Check to see if the check digit given is correct, If not, try next type of person\n            if (total === +vat.substr(9, 1)) return true;\n          }\n        }\n\n        return false;\n      }\n\n      function _isForeigner(vat, rules) {\n        var total = 0;\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 9; i++) {\n          total += +vat.charAt(i) * rules.multipliers.foreigner[i];\n        }\n\n        // Check to see if the check digit given is correct, If not, try next type of person\n        if (total % 10 === +vat.substr(9, 1)) {\n          return true;\n        }\n      }\n\n      function _miscellaneousVAT(vat, rules) {\n        var total = 0;\n        // Finally, if not yet identified, see if it conforms to a miscellaneous VAT number\n\n        for (var i = 0; i < 9; i++) {\n          total += +vat.charAt(i) * rules.multipliers.miscellaneous[i];\n        }\n\n        // Establish check digit.\n        total = 11 - total % 11;\n        if (total === 10) return false;\n        if (total === 11) total = 0;\n\n        // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n        var expect = +vat.substr(9, 1);\n        return total === expect;\n      }\n\n      return {\n        calcs: function(vat) {\n          if (vat.length === 9) {\n            return _checkNineLengthVat(vat);\n          } else {\n            return _isPhysicalPerson(vat, this.rules) || _isForeigner(vat, this.rules) || _miscellaneousVAT(vat, this.rules);\n          }\n\n        },\n        rules: {\n          multipliers: {\n            physical: [\n              2,\n              4,\n              8,\n              5,\n              10,\n              9,\n              7,\n              3,\n              6\n            ],\n            foreigner: [\n              21,\n              19,\n              17,\n              13,\n              11,\n              9,\n              7,\n              3,\n              1\n            ],\n            miscellaneous: [\n              4,\n              3,\n              2,\n              7,\n              6,\n              5,\n              4,\n              3,\n              2\n            ]\n          },\n          regex: [/^(BG)(\\d{9,10})$/]\n        }\n      };\n    })();\n    COUNTRIES.croatia = {\n      calcs: function(vat) {\n        var expect;\n\n        // Checks the check digits of a Croatian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n        var product = 10;\n        var sum = 0;\n\n        for (var i = 0; i < 10; i++) {\n\n          // Extract the next digit and implement the algorithm\n          sum = (+vat.charAt(i) + product) % 10;\n          if (sum === 0) {\n            sum = 10;\n          }\n\n          product = (2 * sum) % 11;\n        }\n\n        // Now check that we have the right check digit\n        expect = +vat.slice(10, 11);\n        return (product + expect) % 10 === 1;\n      },\n      rules: {\n        regex: [/^(HR)(\\d{11})$/]\n      }\n    };\n    COUNTRIES.cyprus = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        // Not allowed to start with '12'\n        if (+vat.slice(0, 2) === 12) return false;\n\n        // Extract the next digit and multiply by the counter.\n\n        for (var i = 0; i < 8; i++) {\n          var temp = +vat.charAt(i);\n          if (i % 2 === 0) {\n            switch (temp) {\n              case 0:\n                temp = 1;\n                break;\n              case 1:\n                temp = 0;\n                break;\n              case 2:\n                temp = 5;\n                break;\n              case 3:\n                temp = 7;\n                break;\n              case 4:\n                temp = 9;\n                break;\n              default:\n                temp = temp * 2 + 3;\n            }\n          }\n          total += temp;\n        }\n\n        // Establish check digit using modulus 26, and translate to char. equivalent.\n        total = total % 26;\n        total = String.fromCharCode(total + 65);\n\n        // Check to see if the check digit given is correct\n        expect = vat.substr(8, 1);\n        return total === expect;\n      },\n      rules: {\n        regex: [/^(CY)([0-59]\\d{7}[A-Z])$/]\n      }\n    };\n    COUNTRIES.czech_republic = (function() {\n\n      function _isLegalEntities(vat, rules) {\n        var total = 0;\n\n        if (rules.additional[0].test(vat)) {\n          // Extract the next digit and multiply by the counter.\n          for (var i = 0; i < 7; i++) {\n            total += +vat.charAt(i) * rules.multipliers[i];\n          }\n\n          // Establish check digit.\n          total = 11 - total % 11;\n          if (total === 10) total = 0;\n          if (total === 11) total = 1;\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          var expect = +vat.slice(7, 8);\n          return total === expect;\n        }\n\n        return false;\n      }\n\n      function _isIndividualType2(vat, rules) {\n        var total = 0;\n\n        if (rules.additional[2].test(vat)) {\n\n          // Extract the next digit and multiply by the counter.\n          for (var j = 0; j < 7; j++) {\n            total += +vat.charAt(j + 1) * rules.multipliers[j];\n          }\n\n          // Establish check digit.\n          total = 11 - total % 11;\n          if (total === 10) total = 0;\n          if (total === 11) total = 1;\n\n          // Convert calculated check digit according to a lookup table;\n          var expect = +vat.slice(8, 9);\n          return rules.lookup[total - 1] === expect;\n        }\n\n        return false;\n      }\n\n      function _isIndividualType3(vat, rules) {\n        if (rules.additional[3].test(vat)) {\n          var temp = +vat.slice(0, 2) + vat.slice(2, 4) + vat.slice(4, 6) + vat.slice(6, 8) + vat.slice(8);\n          var expect = +vat % 11 === 0;\n          return !!(temp % 11 === 0 && expect);\n        }\n\n        return false;\n      }\n\n      return {\n        calcs: function(vat) {\n\n          if (_isLegalEntities(vat, this.rules)) return true;\n          if (_isIndividualType2(vat, this.rules)) return true;\n          if (_isIndividualType3(vat, this.rules)) return true;\n\n          return false;\n        },\n        rules: {\n          multipliers: [\n            8,\n            7,\n            6,\n            5,\n            4,\n            3,\n            2\n          ],\n          lookup: [\n            8,\n            7,\n            6,\n            5,\n            4,\n            3,\n            2,\n            1,\n            0,\n            9,\n            10\n          ],\n          regex: [/^(CZ)(\\d{8,10})(\\d{3})?$/],\n          additional: [\n            /^\\d{8}$/,\n            /^[0-5][0-9][0|1|5|6]\\d[0-3]\\d\\d{3}$/,\n            /^6\\d{8}$/,\n            /^\\d{2}[0-3|5-8]\\d[0-3]\\d\\d{4}$/\n          ]\n        }\n      };\n    }());\n    COUNTRIES.denmark = {\n      calcs: function(vat) {\n        var total = 0;\n\n        for (var i = 0; i < 8; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        return total % 11 === 0;\n      },\n      rules: {\n        multipliers: [\n          2,\n          7,\n          6,\n          5,\n          4,\n          3,\n          2,\n          1\n        ],\n        regex: [/^(DK)(\\d{8})$/]\n      }\n    };\n    COUNTRIES.estonia = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 8; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // Establish check digits using modulus 10.\n        total = 10 - total % 10;\n        if (total === 10) total = 0;\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9);\n        return total === expect;\n      },\n      rules: {\n        multipliers: [\n          3,\n          7,\n          1,\n          3,\n          7,\n          1,\n          3,\n          7\n        ],\n        regex: [/^(EE)(10\\d{7})$/]\n      }\n    };\n    COUNTRIES.europe = {\n      calcs: function() {\n        // We know little about EU numbers apart from the fact that the first 3 digits represent the\n        // country, and that there are nine digits in total.\n        return true;\n      },\n      rules: {\n        regex: [/^(EU)(\\d{9})$/]\n      }\n    };\n    COUNTRIES.finland = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 7; i++) total += +vat.charAt(i) * this.rules.multipliers[i];\n\n        // Establish check digit.\n        total = 11 - total % 11;\n        if (total > 9) {\n          total = 0;\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(7, 8);\n        return total === expect;\n      },\n      rules: {\n        multipliers: [\n          7,\n          9,\n          10,\n          5,\n          8,\n          4,\n          2\n        ],\n        regex: [/^(FI)(\\d{8})$/]\n      }\n    };\n    COUNTRIES.france = {\n      calcs: function(vat) {\n        var total;\n        var expect;\n\n        // Checks the check digits of a French VAT number.\n        if (!(/^\\d{11}$/).test(vat)) {\n          return true;\n        }\n\n        // Extract the last nine digits as an integer.\n        total = +vat.substring(2);\n\n        // Establish check digit.\n        total = (total * 100 + 12) % 97;\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(0, 2);\n        return total === expect;\n      },\n      rules: {\n        regex: [\n          /^(FR)(\\d{11})$/,\n          /^(FR)([A-HJ-NP-Z]\\d{10})$/,\n          /^(FR)(\\d[A-HJ-NP-Z]\\d{9})$/,\n          /^(FR)([A-HJ-NP-Z]{2}\\d{9})$/\n        ]\n      }\n    };\n    COUNTRIES.germany = {\n      calcs: function(vat) {\n        // Checks the check digits of a German VAT number.\n        var product = 10;\n        var sum = 0;\n        var checkDigit = 0;\n        var expect;\n\n        for (var i = 0; i < 8; i++) {\n\n          // Extract the next digit and implement peculiar algorithm!.\n          sum = (+vat.charAt(i) + product) % 10;\n          if (sum === 0) {\n            sum = 10;\n          }\n          product = (2 * sum) % 11;\n        }\n\n        // Establish check digit.\n        if (11 - product === 10) {\n          checkDigit = 0;\n        } else {\n          checkDigit = 11 - product;\n        }\n\n        // Compare it with the last two characters of the VAT number. If the same, then it is a valid\n        // check digit.\n        expect = +vat.slice(8, 9);\n        return checkDigit === expect;\n      },\n      rules: {\n        regex: [/^(DE)([1-9]\\d{8})$/]\n      }\n    };\n    COUNTRIES.greece = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        //eight character numbers should be prefixed with an 0.\n        if (vat.length === 8) {\n          vat = '0' + vat;\n        }\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 8; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // Establish check digit.\n        total = total % 11;\n        if (total > 9) {\n          total = 0;\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9);\n        return total === expect;\n      },\n      rules: {\n        multipliers: [\n          256,\n          128,\n          64,\n          32,\n          16,\n          8,\n          4,\n          2\n        ],\n        regex: [/^(EL)(\\d{9})$/]\n      }\n    };\n    COUNTRIES.hungary = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 7; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // Establish check digit.\n        total = 10 - total % 10;\n        if (total === 10) total = 0;\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(7, 8);\n        return total === expect;\n      },\n      rules: {\n        multipliers: [\n          9,\n          7,\n          3,\n          1,\n          9,\n          7,\n          3\n        ],\n        regex: [/^(HU)(\\d{8})$/]\n      }\n    };\n    COUNTRIES.ireland = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        // If the code is type 1 format, we need to convert it to the new before performing the validation.\n        if (this.rules.typeFormats.first.test(vat)) {\n          vat = '0' + vat.substring(2, 7) + vat.substring(0, 1) + vat.substring(7, 8);\n        }\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 7; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // If the number is type 3 then we need to include the trailing A or H in the calculation\n        if (this.rules.typeFormats.third.test(vat)) {\n          // Add in a multiplier for the character A (1*9=9) or H (8*9=72)\n          if (vat.charAt(8) === 'H') {\n            total += 72;\n          } else {\n            total += 9;\n          }\n        }\n\n        // Establish check digit using modulus 23, and translate to char. equivalent.\n        total = total % 23;\n        if (total === 0) {\n          total = 'W';\n        } else {\n          total = String.fromCharCode(total + 64);\n        }\n\n        // Compare it with the eighth character of the VAT number. If it's the same, then it's valid.\n        expect = vat.slice(7, 8);\n        return total === expect;\n      },\n      rules: {\n        multipliers: [\n          8,\n          7,\n          6,\n          5,\n          4,\n          3,\n          2\n        ],\n        typeFormats: {\n          first: /^\\d[A-Z\\*\\+]/,\n          third: /^\\d{7}[A-Z][AH]$/\n        },\n        regex: [\n          /^(IE)(\\d{7}[A-W])$/,\n          /^(IE)([7-9][A-Z\\*\\+)]\\d{5}[A-W])$/,\n          /^(IE)(\\d{7}[A-W][AH])$/\n        ]\n      }\n    };\n    COUNTRIES.italy = {\n      calcs: function(vat) {\n        var total = 0;\n        var temp;\n        var expect;\n\n        // The last three digits are the issuing office, and cannot exceed more 201, unless 999 or 888\n        if (+vat.slice(0, 7) === 0) {\n          return false;\n        }\n\n        temp = +vat.slice(7, 10);\n        if ((temp < 1) || (temp > 201) && temp !== 999 && temp !== 888) {\n          return false;\n        }\n\n        // Extract the next digit and multiply by the appropriate\n        for (var i = 0; i < 10; i++) {\n          temp = +vat.charAt(i) * this.rules.multipliers[i];\n          if (temp > 9)\n            total += Math.floor(temp / 10) + temp % 10;\n          else\n            total += temp;\n        }\n\n        // Establish check digit.\n        total = 10 - total % 10;\n        if (total > 9) {\n          total = 0;\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(10, 11);\n        return total === expect;\n      },\n      rules: {\n        multipliers: [\n          1,\n          2,\n          1,\n          2,\n          1,\n          2,\n          1,\n          2,\n          1,\n          2\n        ],\n        regex: [/^(IT)(\\d{11})$/]\n      }\n    };\n    COUNTRIES.latvia = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        // Differentiate between legal entities and natural bodies. For the latter we simply check that\n        // the first six digits correspond to valid DDMMYY dates.\n        if ((/^[0-3]/).test(vat)) {\n          return !!(/^[0-3][0-9][0-1][0-9]/).test(vat);\n        } else {\n\n          // Extract the next digit and multiply by the counter.\n          for (var i = 0; i < 10; i++) {\n            total += +vat.charAt(i) * this.rules.multipliers[i];\n          }\n\n          // Establish check digits by getting modulus 11.\n          if (total % 11 === 4 && vat[0] === 9) total = total - 45;\n\n          if (total % 11 === 4) {\n            total = 4 - total % 11;\n          } else if (total % 11 > 4) {\n            total = 14 - total % 11;\n          } else if (total % 11 < 4) {\n            total = 3 - total % 11;\n          }\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          expect = +vat.slice(10, 11);\n          return total === expect;\n        }\n      },\n      rules: {\n        multipliers: [\n          9,\n          1,\n          4,\n          8,\n          3,\n          10,\n          2,\n          5,\n          7,\n          6\n        ],\n        regex: [/^(LV)(\\d{11})$/]\n      }\n    };\n    COUNTRIES.lithunia = (function() {\n\n      function _extractDigit(vat, multiplier, key) {\n        return +vat.charAt(key) * multiplier[key];\n      }\n\n\n      function _doubleCheckCalculation(vat, total, rules) {\n        if (total % 11 === 10) {\n          total = 0;\n          for (var i = 0; i < 8; i++) {\n            total += _extractDigit(vat, rules.multipliers.short, i);\n          }\n        }\n\n        return total;\n      }\n\n      function extractDigit(vat, total) {\n        for (var i = 0; i < 8; i++) {\n          total += +vat.charAt(i) * (i + 1);\n        }\n        return total;\n      }\n\n      function checkDigit(total) {\n        total = total % 11;\n        if (total === 10) {\n          total = 0;\n        }\n\n        return total;\n      }\n\n      function _check9DigitVat(vat, rules) {\n        // 9 character VAT numbers are for legal persons\n        var total = 0;\n        if (vat.length === 9) {\n\n          // 8th character must be one\n          if (!(/^\\d{7}1/).test(vat)) return false;\n\n          // Extract the next digit and multiply by the counter+1.\n          total = extractDigit(vat, total);\n\n          // Can have a double check digit calculation!\n          total = _doubleCheckCalculation(vat, total, rules);\n\n          // Establish check digit.\n          total = checkDigit(total);\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          var expect = +vat.slice(8, 9);\n          return total === expect;\n        }\n        return false;\n      }\n\n      function extractDigit12(vat, total, rules) {\n        for (var k = 0; k < 11; k++) {\n          total += _extractDigit(vat, rules.multipliers.med, k);\n        }\n        return total;\n      }\n\n      function _doubleCheckCalculation12(vat, total, rules) {\n        if (total % 11 === 10) {\n          total = 0;\n          for (var l = 0; l < 11; l++) {\n            total += _extractDigit(vat, rules.multipliers.alt, l);\n          }\n        }\n\n        return total;\n      }\n\n      function _check12DigitVat(vat, rules) {\n        var total = 0;\n\n        // 12 character VAT numbers are for temporarily registered taxpayers\n        if (vat.length === 12) {\n\n          // 11th character must be one\n          if (!(rules.check).test(vat)) return false;\n\n          // Extract the next digit and multiply by the counter+1.\n          total = extractDigit12(vat, total, rules);\n\n          // Can have a double check digit calculation!\n          total = _doubleCheckCalculation12(vat, total, rules);\n\n          // Establish check digit.\n          total = checkDigit(total);\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          var expect = +vat.slice(11, 12);\n          return total === expect;\n        }\n\n        return false;\n      }\n\n      return {\n        calcs: function(vat) {\n          return _check9DigitVat(vat, this.rules) || _check12DigitVat(vat, this.rules);\n        },\n        rules: {\n          multipliers: {\n            short: [\n              3,\n              4,\n              5,\n              6,\n              7,\n              8,\n              9,\n              1\n            ],\n            med: [\n              1,\n              2,\n              3,\n              4,\n              5,\n              6,\n              7,\n              8,\n              9,\n              1,\n              2\n            ],\n            alt: [\n              3,\n              4,\n              5,\n              6,\n              7,\n              8,\n              9,\n              1,\n              2,\n              3,\n              4\n            ]\n          },\n          check: /^\\d{10}1/,\n          regex: [/^(LT)(\\d{9}|\\d{12})$/]\n        }\n      };\n    }());\n    COUNTRIES.luxembourg = {\n      calcs: function(vat) {\n        var expect = +vat.slice(6, 8);\n        var checkDigit = +vat.slice(0, 6) % 89;\n        // Checks the check digits of a Luxembourg VAT number.\n\n        return checkDigit === expect;\n      },\n      rules: {\n        regex: [/^(LU)(\\d{8})$/]\n      }\n    };\n    COUNTRIES.malta = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 6; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // Establish check digits by getting modulus 37.\n        total = 37 - total % 37;\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(6, 8);\n        return total === expect;\n      },\n      rules: {\n        multipliers: [\n          3,\n          4,\n          6,\n          7,\n          8,\n          9\n        ],\n        regex: [/^(MT)([1-9]\\d{7})$/]\n      }\n    };\n    COUNTRIES.netherlands = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 8; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // Establish check digits by getting modulus 11.\n        total = total % 11;\n        if (total > 9) {\n          total = 0;\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9);\n        return total === expect;\n      },\n      rules: {\n        multipliers: [\n          9,\n          8,\n          7,\n          6,\n          5,\n          4,\n          3,\n          2\n        ],\n        regex: [/^(NL)(\\d{9})B\\d{2}$/]\n      }\n    };\n    COUNTRIES.norway = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n        // See http://www.brreg.no/english/coordination/number.html\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 8; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // Establish check digits by getting modulus 11. Check digits > 9 are invalid\n        total = 11 - total % 11;\n\n        if (total === 11) {\n          total = 0;\n        }\n\n        if (total < 10) {\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          expect = +vat.slice(8, 9);\n          return total === expect;\n        }\n      },\n      rules: {\n        multipliers: [\n          3,\n          2,\n          7,\n          6,\n          5,\n          4,\n          3,\n          2\n        ],\n        regex: [/^(NO)(\\d{9})$/]\n      }\n    };\n    COUNTRIES.poland = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 9; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // Establish check digits subtracting modulus 11 from 11.\n        total = total % 11;\n        if (total > 9) {\n          total = 0;\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(9, 10);\n        return total === expect;\n      },\n      rules: {\n        multipliers: [\n          6,\n          5,\n          7,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7\n        ],\n        regex: [/^(PL)(\\d{10})$/]\n      }\n    };\n    COUNTRIES.portugal = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 8; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // Establish check digits subtracting modulus 11 from 11.\n        total = 11 - total % 11;\n        if (total > 9) {\n          total = 0;\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9);\n        return total === expect;\n      },\n      rules: {\n        multipliers: [\n          9,\n          8,\n          7,\n          6,\n          5,\n          4,\n          3,\n          2\n        ],\n        regex: [/^(PT)(\\d{9})$/]\n      }\n    };\n    COUNTRIES.romania = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        // Extract the next digit and multiply by the counter.\n        var vatLength = vat.length;\n        var multipliers = this.rules.multipliers.slice(10 - vatLength);\n\n        for (var i = 0; i < vat.length - 1; i++) {\n          total += +vat.charAt(i) * multipliers[i];\n        }\n\n        // Establish check digits by getting modulus 11.\n        total = (10 * total) % 11;\n        if (total === 10) total = 0;\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(vat.length - 1, vat.length);\n        return total === expect;\n      },\n      rules: {\n        multipliers: [\n          7,\n          5,\n          3,\n          2,\n          1,\n          7,\n          5,\n          3,\n          2\n        ],\n        regex: [/^(RO)([1-9]\\d{1,9})$/]\n      }\n    };\n    COUNTRIES.russia = (function() {\n\n      function _check10DigitINN(vat, rules) {\n        var total = 0;\n\n        if (vat.length === 10) {\n\n          for (var i = 0; i < 10; i++) {\n            total += +vat.charAt(i) * rules.multipliers.m_1[i];\n          }\n\n          total = total % 11;\n          if (total > 9) {\n            total = total % 10;\n          }\n\n          // Compare it with the last character of the VAT number. If it is the same, then it's valid\n          var expect = +vat.slice(9, 10);\n          return total === expect;\n        }\n\n        return false;\n      }\n\n      function _check12DigitINN(vat, rules) {\n        var total1 = 0;\n        var total2 = 0;\n\n        if (vat.length === 12) {\n\n          for (var j = 0; j < 11; j++) {\n            total1 += +vat.charAt(j) * rules.multipliers.m_2[j];\n          }\n\n          total1 = total1 % 11;\n\n          if (total1 > 9) {\n            total1 = total1 % 10;\n          }\n\n          for (var k = 0; k < 11; k++) {\n            total2 += +vat.charAt(k) * rules.multipliers.m_3[k];\n          }\n\n          total2 = total2 % 11;\n          if (total2 > 9) {\n            total2 = total2 % 10;\n          }\n\n          // Compare the first check with the 11th character and the second check with the 12th and last\n          // character of the VAT number. If they're both the same, then it's valid\n          var expect = (total1 === +vat.slice(10, 11));\n          var expect2 = (total2 === +vat.slice(11, 12));\n          return (expect) && (expect2);\n        }\n\n        return false;\n      }\n\n\n      return {\n        calcs: function(vat) {\n          // See http://russianpartner.biz/test_inn.html for algorithm\n          return _check10DigitINN(vat, this.rules) || _check12DigitINN(vat, this.rules);\n        },\n        rules: {\n          multipliers: {\n            m_1: [\n              2,\n              4,\n              10,\n              3,\n              5,\n              9,\n              4,\n              6,\n              8,\n              0\n            ],\n            m_2: [\n              7,\n              2,\n              4,\n              10,\n              3,\n              5,\n              9,\n              4,\n              6,\n              8,\n              0\n            ],\n            m_3: [\n              3,\n              7,\n              2,\n              4,\n              10,\n              3,\n              5,\n              9,\n              4,\n              6,\n              8,\n              0\n            ]\n          },\n          regex: [/^(RU)(\\d{10}|\\d{12})$/]\n        }\n      };\n    }());\n    COUNTRIES.serbia = {\n      calcs: function(vat) {\n        // Checks the check digits of a Serbian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n        var product = 10;\n        var sum = 0;\n        var checkDigit;\n\n        for (var i = 0; i < 8; i++) {\n\n          // Extract the next digit and implement the algorithm\n          sum = (+vat.charAt(i) + product) % 10;\n          if (sum === 0) {\n            sum = 10;\n          }\n          product = (2 * sum) % 11;\n        }\n\n        // Now check that we have the right check digit\n        var expect = 1;\n        checkDigit = (product + (+vat.slice(8, 9))) % 10;\n        return checkDigit === expect;\n      },\n      rules: {\n        regex: [/^(RS)(\\d{9})$/]\n      }\n    };\n    COUNTRIES.slovakia_republic = {\n      calcs: function(vat) {\n        var expect = 0;\n        var checkDigit = (vat % 11);\n        return checkDigit === expect;\n      },\n      rules: {\n        regex: [/^(SK)([1-9]\\d[2346-9]\\d{7})$/]\n      }\n    };\n    COUNTRIES.slovenia = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 7; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // Establish check digits using modulus 11\n        total = 11 - total % 11;\n        if (total === 10) {\n          total = 0;\n        }\n\n        // Compare the number with the last character of the VAT number. If it is the\n        // same, then it's a valid check digit.\n        expect = +vat.slice(7, 8);\n        return !!(total !== 11 && total === expect);\n      },\n      rules: {\n        multipliers: [\n          8,\n          7,\n          6,\n          5,\n          4,\n          3,\n          2\n        ],\n        regex: [/^(SI)([1-9]\\d{7})$/]\n      }\n    };\n    COUNTRIES.spain = {\n      calcs: function(vat) {\n        var i = 0;\n        var total = 0;\n        var temp;\n        var expect;\n\n        // National juridical entities\n        if (this.rules.additional[0].test(vat)) {\n\n          // Extract the next digit and multiply by the counter.\n          for (i = 0; i < 7; i++) {\n            temp = vat.charAt(i + 1) * this.rules.multipliers[i];\n            if (temp > 9)\n              total += Math.floor(temp / 10) + temp % 10;\n            else\n              total += temp;\n          }\n          // Now calculate the check digit itself.\n          total = 10 - total % 10;\n          if (total === 10) {\n            total = 0;\n          }\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          expect = +vat.slice(8, 9);\n          return total === expect;\n        }\n\n        // Juridical entities other than national ones\n        else if (this.rules.additional[1].test(vat)) {\n\n          // Extract the next digit and multiply by the counter.\n          for (i = 0; i < 7; i++) {\n            temp = vat.charAt(i + 1) * this.rules.multipliers[i];\n            if (temp > 9)\n              total += Math.floor(temp / 10) + temp % 10;\n            else\n              total += temp;\n          }\n\n          // Now calculate the check digit itself.\n          total = 10 - total % 10;\n          total = String.fromCharCode(total + 64);\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          expect = vat.slice(8, 9);\n          return total === expect;\n        }\n\n        // Personal number (NIF) (starting with numeric of Y or Z)\n        else if (this.rules.additional[2].test(vat)) {\n          var tempnumber = vat;\n          if (tempnumber.substring(0, 1) === 'Y') tempnumber = tempnumber.replace(/Y/, '1');\n          if (tempnumber.substring(0, 1) === 'Z') tempnumber = tempnumber.replace(/Z/, '2');\n          expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+tempnumber.substring(0, 8) % 23);\n          return tempnumber.charAt(8) === expect;\n        }\n\n        // Personal number (NIF) (starting with K, L, M, or X)\n        else if (this.rules.additional[3].test(vat)) {\n          expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+vat.substring(1, 8) % 23);\n          return vat.charAt(8) === expect;\n        } else return false;\n      },\n      rules: {\n        multipliers: [\n          2,\n          1,\n          2,\n          1,\n          2,\n          1,\n          2\n        ],\n        regex: [\n          /^(ES)([A-Z]\\d{8})$/,\n          /^(ES)([A-HN-SW]\\d{7}[A-J])$/,\n          /^(ES)([0-9YZ]\\d{7}[A-Z])$/,\n          /^(ES)([KLMX]\\d{7}[A-Z])$/\n        ],\n        additional: [\n          /^[A-H|J|U|V]\\d{8}$/,\n          /^[A-H|N-S|W]\\d{7}[A-J]$/,\n          /^[0-9|Y|Z]\\d{7}[A-Z]$/,\n          /^[K|L|M|X]\\d{7}[A-Z]$/\n        ]\n      }\n    };\n    COUNTRIES.sweden = {\n      calcs: function(vat) {\n        var expect;\n\n        // Calculate R where R = R1 + R3 + R5 + R7 + R9, and Ri = INT(Ci/5) + (Ci*2) modulo 10\n        var R = 0;\n        var digit;\n        for (var i = 0; i < 9; i = i + 2) {\n          digit = +vat.charAt(i);\n          R += Math.floor(digit / 5) + ((digit * 2) % 10);\n        }\n\n        // Calculate S where S = C2 + C4 + C6 + C8\n        var S = 0;\n        for (var j = 1; j < 9; j = j + 2) {\n          S += +vat.charAt(j);\n        }\n\n        var checkDigit = (10 - (R + S) % 10) % 10;\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(9, 10);\n\n        return checkDigit === expect;\n      },\n      rules: {\n        regex: [/^(SE)(\\d{10}01)$/]\n      }\n    };\n    COUNTRIES.switzerland = {\n      calcs: function(vat) {\n        var total = 0;\n        for (var i = 0; i < 8; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // Establish check digit.\n        total = 11 - total % 11;\n        if (total === 10) return false;\n        if (total === 11) total = 0;\n\n        // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n        var expect = +vat.substr(8, 1);\n        return total === expect;\n      },\n      rules: {\n        multipliers: [\n          5,\n          4,\n          3,\n          2,\n          7,\n          6,\n          5,\n          4\n        ],\n        regex: [/^(CHE)(\\d{9})(MWST)?$/]\n      }\n    };\n    COUNTRIES.united_kingdom = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        // Government departments\n        if (vat.substr(0, 2) === 'GD') {\n          expect = 500;\n          return vat.substr(2, 3) < expect;\n        }\n\n        // Health authorities\n        if (vat.substr(0, 2) === 'HA') {\n          expect = 499;\n          return vat.substr(2, 3) > expect;\n        }\n\n        // Standard and commercial numbers\n\n\n        // 0 VAT numbers disallowed!\n        if (+vat.slice(0) === 0) return false;\n\n        // Check range is OK for modulus 97 calculation\n        var no = +vat.slice(0, 7);\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 7; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // Old numbers use a simple 97 modulus, but new numbers use an adaptation of that (less 55). Our\n        // VAT number could use either system, so we check it against both.\n\n        // Establish check digits by subtracting 97 from total until negative.\n        var checkDigit = total;\n        while (checkDigit > 0) {\n          checkDigit = checkDigit - 97;\n        }\n\n        // Get the absolute value and compare it with the last two characters of the VAT number. If the\n        // same, then it is a valid traditional check digit. However, even then the number must fit within\n        // certain specified ranges.\n        checkDigit = Math.abs(checkDigit);\n        if (checkDigit === +vat.slice(7, 9) && no < 9990001 && (no < 100000 || no > 999999) && (no < 9490001 || no > 9700000)) return true;\n\n        // Now try the new method by subtracting 55 from the check digit if we can - else add 42\n        if (checkDigit >= 55)\n          checkDigit = checkDigit - 55;\n        else\n          checkDigit = checkDigit + 42;\n        expect = +vat.slice(7, 9);\n        return !!(checkDigit === expect && no > 1000000);\n      },\n      rules: {\n        multipliers: [\n          8,\n          7,\n          6,\n          5,\n          4,\n          3,\n          2\n        ],\n        regex: [\n          /^(GB)?(\\d{9})$/,\n          /^(GB)?(\\d{12})$/,\n          /^(GB)?(GD\\d{3})$/,\n          /^(GB)?(HA\\d{3})$/\n        ]\n      }\n    };\n\n    //Support of node.js\n\n    if (typeof module === 'object' && module.exports) module.exports = exports;\n\n    return exports;\n\n  })();\n\n  return jsvat;\n});\n'use strict';\n\nangular.module('angular-jsvat-input', [])\n\n    .directive('jsvat', ['JsVatFactory', function (JsVatFactory) {\n      return {\n        restrict: 'A',\n        scope: {\n          jsvat: '=?'\n        },\n        require: 'ngModel',\n        link: function (scope, element) {\n          function makeObj(name) {\n            if (!angular.isObject(scope[name])) {\n              var value = scope[name];\n              scope[name] = {\n                value: value\n              }\n            }\n          }\n\n          makeObj('jsvat');\n\n          var invalid = '-jsvat-invalid';\n          var valid = '-jsvat-valid';\n\n          function setValidity(isValid) {\n            if (isValid) {\n              element.addClass(valid);\n              element.removeClass(invalid);\n            } else {\n              element.addClass(invalid);\n              element.removeClass(valid);\n            }\n\n            modelController.$setValidity('vat', isValid);\n          }\n\n          var modelController = element.controller('ngModel');\n\n          scope.checkVAT = function (vat) {\n            scope.jsvat = JsVatFactory.checkVAT(vat);\n            var isEmpty = scope.jsvat.value === '' || (!scope.jsvat.value && scope.jsvat.value !== '0');\n            setValidity(scope.jsvat.isValid || isEmpty);\n            //setValidity(scope.jsvat.isValid);\n          };\n\n          scope.$watch(function () {\n            return modelController.$modelValue;\n          }, function (val) {\n            scope.checkVAT(val);\n          });\n\n        }\n      }\n    }])\n;"],"sourceRoot":"/source/"}