{"version":3,"sources":["angular-jsvat.js"],"names":["angular","module","directive","$compile","restrict","replace","templateUrl","scope","ngModel","compile","tElement","tAttrs","makeLoverCamelCase","str","makeUpperCase","s","regex","toUpperCase","a","toLowerCase","split","map","join","_moveAttrToInput","attr","val","attrNameAfter","label","removeAttr","input","setAttribute","element","children","post","elem","link","attrs","console","log","opts","jsvatInputClassObj","jsvatLabelClassObj","isObject","value","run","$templateCache","put","factory","jsvat","_validateRegex","vat","test","_validateRules","countryName","parsedNum","exec","vatNum","COUNTRIES","calcs","_validate","result","getClearVAT","toString","_makeArr","Array","isArray","isCountryBlocked","config","Object","keys","length","country","exports","checkVAT","isDetailed","isValid","countries","hasOwnProperty","regexArr","rules","i","isValidForCurrCountry","push","austria","temp","total","charAt","this","multipliers","Math","floor","slice","belgium","check","bulgaria","_checkNineLengthVat","expect","j","_isPhysicalPerson","month","physical","substr","_isForeigner","foreigner","_miscellaneousVAT","miscellaneous","croatia","product","sum","cyprus","String","fromCharCode","czech_republic","_isLegalEntities","additional","_isIndividualType2","lookup","_isIndividualType3","denmark","estonia","europe","finland","france","substring","germany","checkDigit","greece","hungary","ireland","typeFormats","first","third","italy","latvia","lithunia","_extractDigit","multiplier","key","_doubleCheckCalculation","extractDigit","_check9DigitVat","extractDigit12","k","med","_doubleCheckCalculation12","l","alt","_check12DigitVat","short","luxembourg","malta","netherlands","norway","poland","portugal","romania","vatLength","russia","_check10DigitINN","m_1","_check12DigitINN","total1","total2","m_2","m_3","expect2","serbia","slovakia_republic","slovenia","spain","tempnumber","sweden","digit","R","S","switzerland","united_kingdom","no","abs"],"mappings":"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","file":"angular-jsvat.min.js","sourcesContent":["'use strict';\n\nangular.module('angular-jsvat')\n\n    .directive('jsvatInput', ['$compile', function ($compile) {\n      return {\n        restrict: 'E',\n        replace: true,\n        templateUrl: 'jsvat_input.html',\n        scope: {\n          ngModel: '='\n        },\n        compile: function (tElement, tAttrs) {\n          var label = angular.element(tElement);\n          var input = label[0].children[0];\n\n          //label.removeAttr('ng-model');\n\n          function makeLoverCamelCase(str) {\n            var toUpperCase = function(a) { return a.toUpperCase(); };\n            var toLowerCase = function(a) { return a.toLowerCase(); };\n            var regex = /(?:^|\\s)\\S/g;\n\n            function makeUpperCase(s) {\n              return s.replace(regex, toUpperCase);\n            }\n\n            return str.split(/\\-/).map(makeUpperCase).join('').replace(regex, toLowerCase);\n          }\n\n          function _moveAttrToInput(attr, val, attrNameAfter) {\n            if (tAttrs[makeLoverCamelCase(attr)]) {\n              label.removeAttr(attr);\n              input.setAttribute(attrNameAfter || attr, val);\n            }\n          }\n\n          _moveAttrToInput('jsvat-input-class', 'jsvatInputClassObj', 'ng-class');\n          _moveAttrToInput('ng-required', 'opts.isRequired');\n          _moveAttrToInput('ng-disabled', 'opts.isDisabled');\n          _moveAttrToInput('ng-readonly', 'opts.isReadonly');\n          _moveAttrToInput('ng-maxlength', 'opts.maxlength');\n          _moveAttrToInput('ng-minlength', 'opts.minlength');\n          _moveAttrToInput('ng-pattern', 'opts.pattern');\n          _moveAttrToInput('ng-size', 'opts.size');\n\n          return {\n            post: function (scope, elem) {\n              $compile(elem)(scope);\n            }\n          };\n        },\n        link: function (scope, element, attrs) {\n          //TODO (S.Panfilov)\n          console.log(attrs);\n\n          scope.opts = scope.opts || {};\n\n          scope.jsvatInputClassObj = {};\n          scope.jsvatLabelClassObj = {};\n\n          if (!angular.isObject(scope.ngModel)) {\n            var value = scope.ngModel;\n            scope.ngModel = {\n              value: value\n            }\n          }\n\n        }\n      }\n    }])\n;\nangular.module(\"angular-jsvat.templates\", []).run([\"$templateCache\", function($templateCache) {$templateCache.put(\"jsvat_input.html\",\"<label ng-class=\\\"jsvatLabelClassObj\\\" class=\\\"jsvat-input__block\\\"><input type=\\\"text\\\" ng-model=\\\"entity.vat\\\" class=\\\"jsvat-input__field\\\"/></label>\");}]);\nangular.module('angular-jsvat', ['angular-jsvat.templates'])\n\n.factory('JsVatFactory', function() {\n\n  var jsvat = (function() {\n\n    'use strict';\n\n    var COUNTRIES = {};\n\n    function _validateRegex(vat, regex) {\n      return regex.test(vat);\n    }\n\n    function _validateRules(vat, regex, countryName) {\n      var parsedNum = regex.exec(vat);\n      var vatNum = parsedNum[2];\n\n      return COUNTRIES[countryName].calcs(vatNum);\n    }\n\n    function _validate(vat, regex, countryName) {\n      var result = false;\n      if (_validateRegex(vat, regex)) {\n        result = _validateRules(vat, regex, countryName);\n      }\n      return result;\n    }\n\n    function getClearVAT(vat) {\n      return vat.toString().toUpperCase().replace(/(\\s|-|\\.)+/g, '');\n    }\n\n    function _makeArr(regex) {\n      if (!Array.isArray(regex)) {\n        return [regex];\n      }\n\n      return regex;\n    }\n\n    function isCountryBlocked(config, countryName) {\n      if (!config || Object.keys(config).length === 0) return false;\n\n      var country = config[countryName];\n\n      return (country === null || country === null) ? true : !country;\n    }\n\n    var exports = {\n      config: {},\n      checkVAT: function(vat, isDetailed) {\n        if (!vat) return false;\n\n        vat = getClearVAT(vat);\n\n        var result = {\n          isValid: false,\n          countries: []\n        };\n\n        for (var countryName in COUNTRIES) {\n          if (COUNTRIES.hasOwnProperty(countryName)) {\n\n            //Make sure country check not skipped in config\n            if (!isCountryBlocked(exports.config, countryName)) {\n\n              var regexArr = _makeArr(COUNTRIES[countryName].rules.regex);\n              for (var i = 0; i < regexArr.length; i++) {\n\n                //If once become a true, shouldn't be a false any more\n                result.isValid = (_validate(vat, regexArr[i], countryName)) ? true : result.isValid;\n\n\n                if (!isDetailed && result.isValid) return result.isValid;\n\n                var isValidForCurrCountry = _validate(vat, regexArr[i], countryName);\n\n                if (isValidForCurrCountry) {\n                  result.countries.push(countryName);\n                }\n              }\n\n            }\n          }\n        }\n\n        return isDetailed ? result : result.isValid;\n\n      }\n    };\n    COUNTRIES.austria = {\n      calcs: function(vat) {\n        var total = 0;\n        var temp;\n\n        for (var i = 0; i < 7; i++) {\n          temp = vat.charAt(i) * this.rules.multipliers[i];\n\n          if (temp > 9) {\n            total += Math.floor(temp / 10) + temp % 10;\n          } else {\n            total += temp;\n          }\n        }\n\n        total = 10 - (total + 4) % 10;\n        if (total === 10) total = 0;\n\n        return total === +vat.slice(7, 8);\n      },\n      rules: {\n        multipliers: [\n          1,\n          2,\n          1,\n          2,\n          1,\n          2,\n          1\n        ],\n        regex: /^(AT)U(\\d{8})$/\n      }\n    };\n    COUNTRIES.belgium = {\n      calcs: function(vat) {\n        if (vat.length === 9) {\n          vat = '0' + vat;\n        }\n\n        if (+vat.slice(1, 2) === 0) return false;\n\n        var check = (97 - +vat.slice(0, 8) % 97);\n        return check === +vat.slice(8, 10);\n      },\n      rules: {\n        regex: /^(BE)(0?\\d{9})$/\n      }\n    };\n    COUNTRIES.bulgaria = (function() {\n\n      function _checkNineLengthVat(vat) {\n        var total;\n        var temp = 0;\n        var expect = +vat.slice(8);\n\n        for (var i = 0; i < 8; i++) {\n          temp += +vat.charAt(i) * (i + 1);\n        }\n\n        total = temp % 11;\n        if (total !== 10) {\n          return total === expect;\n        }\n\n        temp = 0;\n        for (var j = 0; j < 8; j++) {\n          temp += +vat.charAt(j) * (j + 3);\n        }\n\n        total = temp % 11;\n        if (total === 10) total = 0;\n\n        return total === expect;\n      }\n\n      function _isPhysicalPerson(vat, rules) {\n        var total = 0;\n        // 10 digit VAT code - see if it relates to a standard physical person\n        if ((/^\\d\\d[0-5]\\d[0-3]\\d\\d{4}$/).test(vat)) {\n          // Check month\n          var month = +vat.slice(2, 4);\n          if ((month > 0 && month < 13) || (month > 20 && month < 33) || (month > 40 && month < 53)) {\n\n            total = 0;\n            for (var i = 0; i < 9; i++) {\n              total += +vat.charAt(i) * rules.multipliers.physical[i];\n            }\n            // Establish check digit.\n            total = total % 11;\n            if (total === 10) total = 0;\n\n            // Check to see if the check digit given is correct, If not, try next type of person\n            if (total === +vat.substr(9, 1)) return true;\n          }\n        }\n\n        return false;\n      }\n\n      function _isForeigner(vat, rules) {\n        var total = 0;\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 9; i++) {\n          total += +vat.charAt(i) * rules.multipliers.foreigner[i];\n        }\n\n        // Check to see if the check digit given is correct, If not, try next type of person\n        if (total % 10 === +vat.substr(9, 1)) {\n          return true;\n        }\n      }\n\n      function _miscellaneousVAT(vat, rules) {\n        var total = 0;\n        // Finally, if not yet identified, see if it conforms to a miscellaneous VAT number\n\n        for (var i = 0; i < 9; i++) {\n          total += +vat.charAt(i) * rules.multipliers.miscellaneous[i];\n        }\n\n        // Establish check digit.\n        total = 11 - total % 11;\n        if (total === 10) return false;\n        if (total === 11) total = 0;\n\n        // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n        var expect = +vat.substr(9, 1);\n        return total === expect;\n      }\n\n      return {\n        calcs: function(vat) {\n          if (vat.length === 9) {\n            return _checkNineLengthVat(vat);\n          } else {\n            return _isPhysicalPerson(vat, this.rules) || _isForeigner(vat, this.rules) || _miscellaneousVAT(vat, this.rules);\n          }\n\n        },\n        rules: {\n          multipliers: {\n            physical: [\n              2,\n              4,\n              8,\n              5,\n              10,\n              9,\n              7,\n              3,\n              6\n            ],\n            foreigner: [\n              21,\n              19,\n              17,\n              13,\n              11,\n              9,\n              7,\n              3,\n              1\n            ],\n            miscellaneous: [\n              4,\n              3,\n              2,\n              7,\n              6,\n              5,\n              4,\n              3,\n              2\n            ]\n          },\n          regex: /^(BG)(\\d{9,10})$/\n        }\n      };\n    })();\n    COUNTRIES.croatia = {\n      calcs: function(vat) {\n        var expect;\n\n        // Checks the check digits of a Croatian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n        var product = 10;\n        var sum = 0;\n\n        for (var i = 0; i < 10; i++) {\n\n          // Extract the next digit and implement the algorithm\n          sum = (+vat.charAt(i) + product) % 10;\n          if (sum === 0) {\n            sum = 10;\n          }\n\n          product = (2 * sum) % 11;\n        }\n\n        // Now check that we have the right check digit\n        expect = +vat.slice(10, 11);\n        return (product + expect) % 10 === 1;\n      },\n      rules: {\n        regex: /^(HR)(\\d{11})$/\n      }\n    };\n    COUNTRIES.cyprus = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        // Not allowed to start with '12'\n        if (+vat.slice(0, 2) === 12) return false;\n\n        // Extract the next digit and multiply by the counter.\n\n        for (var i = 0; i < 8; i++) {\n          var temp = +vat.charAt(i);\n          if (i % 2 === 0) {\n            switch (temp) {\n              case 0:\n                temp = 1;\n                break;\n              case 1:\n                temp = 0;\n                break;\n              case 2:\n                temp = 5;\n                break;\n              case 3:\n                temp = 7;\n                break;\n              case 4:\n                temp = 9;\n                break;\n              default:\n                temp = temp * 2 + 3;\n            }\n          }\n          total += temp;\n        }\n\n        // Establish check digit using modulus 26, and translate to char. equivalent.\n        total = total % 26;\n        total = String.fromCharCode(total + 65);\n\n        // Check to see if the check digit given is correct\n        expect = vat.substr(8, 1);\n        return total === expect;\n      },\n      rules: {\n        regex: /^(CY)([0-59]\\d{7}[A-Z])$/\n      }\n    };\n    COUNTRIES.czech_republic = (function() {\n\n      function _isLegalEntities(vat, rules) {\n        var total = 0;\n\n        if (rules.additional[0].test(vat)) {\n          // Extract the next digit and multiply by the counter.\n          for (var i = 0; i < 7; i++) {\n            total += +vat.charAt(i) * rules.multipliers[i];\n          }\n\n          // Establish check digit.\n          total = 11 - total % 11;\n          if (total === 10) total = 0;\n          if (total === 11) total = 1;\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          var expect = +vat.slice(7, 8);\n          return total === expect;\n        }\n\n        return false;\n      }\n\n      function _isIndividualType2(vat, rules) {\n        var total = 0;\n\n        if (rules.additional[2].test(vat)) {\n\n          // Extract the next digit and multiply by the counter.\n          for (var j = 0; j < 7; j++) {\n            total += +vat.charAt(j + 1) * rules.multipliers[j];\n          }\n\n          // Establish check digit.\n          total = 11 - total % 11;\n          if (total === 10) total = 0;\n          if (total === 11) total = 1;\n\n          // Convert calculated check digit according to a lookup table;\n          var expect = +vat.slice(8, 9);\n          return rules.lookup[total - 1] === expect;\n        }\n\n        return false;\n      }\n\n      function _isIndividualType3(vat, rules) {\n        if (rules.additional[3].test(vat)) {\n          var temp = +vat.slice(0, 2) + vat.slice(2, 4) + vat.slice(4, 6) + vat.slice(6, 8) + vat.slice(8);\n          var expect = +vat % 11 === 0;\n          return !!(temp % 11 === 0 && expect);\n        }\n\n        return false;\n      }\n\n      return {\n        calcs: function(vat) {\n\n          if (_isLegalEntities(vat, this.rules)) return true;\n          if (_isIndividualType2(vat, this.rules)) return true;\n          if (_isIndividualType3(vat, this.rules)) return true;\n\n          return false;\n        },\n        rules: {\n          multipliers: [\n            8,\n            7,\n            6,\n            5,\n            4,\n            3,\n            2\n          ],\n          lookup: [\n            8,\n            7,\n            6,\n            5,\n            4,\n            3,\n            2,\n            1,\n            0,\n            9,\n            10\n          ],\n          regex: /^(CZ)(\\d{8,10})(\\d{3})?$/,\n          additional: [\n            /^\\d{8}$/,\n            /^[0-5][0-9][0|1|5|6]\\d[0-3]\\d\\d{3}$/,\n            /^6\\d{8}$/,\n            /^\\d{2}[0-3|5-8]\\d[0-3]\\d\\d{4}$/\n          ]\n        }\n      };\n    }());\n    COUNTRIES.denmark = {\n      calcs: function(vat) {\n        var total = 0;\n\n        for (var i = 0; i < 8; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        return total % 11 === 0;\n      },\n      rules: {\n        multipliers: [\n          2,\n          7,\n          6,\n          5,\n          4,\n          3,\n          2,\n          1\n        ],\n        regex: /^(DK)(\\d{8})$/\n      }\n    };\n    COUNTRIES.estonia = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 8; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // Establish check digits using modulus 10.\n        total = 10 - total % 10;\n        if (total === 10) total = 0;\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9);\n        return total === expect;\n      },\n      rules: {\n        multipliers: [\n          3,\n          7,\n          1,\n          3,\n          7,\n          1,\n          3,\n          7\n        ],\n        regex: /^(EE)(10\\d{7})$/\n      }\n    };\n    COUNTRIES.europe = {\n      calcs: function() {\n        // We know little about EU numbers apart from the fact that the first 3 digits represent the\n        // country, and that there are nine digits in total.\n        return true;\n      },\n      rules: {\n        regex: /^(EU)(\\d{9})$/\n      }\n    };\n    COUNTRIES.finland = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 7; i++) total += +vat.charAt(i) * this.rules.multipliers[i];\n\n        // Establish check digit.\n        total = 11 - total % 11;\n        if (total > 9) {\n          total = 0;\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(7, 8);\n        return total === expect;\n      },\n      rules: {\n        multipliers: [\n          7,\n          9,\n          10,\n          5,\n          8,\n          4,\n          2\n        ],\n        regex: /^(FI)(\\d{8})$/\n      }\n    };\n    COUNTRIES.france = {\n      calcs: function(vat) {\n        var total;\n        var expect;\n\n        // Checks the check digits of a French VAT number.\n        if (!(/^\\d{11}$/).test(vat)) {\n          return true;\n        }\n\n        // Extract the last nine digits as an integer.\n        total = +vat.substring(2);\n\n        // Establish check digit.\n        total = (total * 100 + 12) % 97;\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(0, 2);\n        return total === expect;\n      },\n      rules: {\n        regex: [\n          /^(FR)(\\d{11})$/,\n          /^(FR)([A-HJ-NP-Z]\\d{10})$/,\n          /^(FR)(\\d[A-HJ-NP-Z]\\d{9})$/,\n          /^(FR)([A-HJ-NP-Z]{2}\\d{9})$/\n        ]\n      }\n    };\n    COUNTRIES.germany = {\n      calcs: function(vat) {\n        // Checks the check digits of a German VAT number.\n        var product = 10;\n        var sum = 0;\n        var checkDigit = 0;\n        var expect;\n\n        for (var i = 0; i < 8; i++) {\n\n          // Extract the next digit and implement peculiar algorithm!.\n          sum = (+vat.charAt(i) + product) % 10;\n          if (sum === 0) {\n            sum = 10;\n          }\n          product = (2 * sum) % 11;\n        }\n\n        // Establish check digit.\n        if (11 - product === 10) {\n          checkDigit = 0;\n        } else {\n          checkDigit = 11 - product;\n        }\n\n        // Compare it with the last two characters of the VAT number. If the same, then it is a valid\n        // check digit.\n        expect = +vat.slice(8, 9);\n        return checkDigit === expect;\n      },\n      rules: {\n        regex: /^(DE)([1-9]\\d{8})$/\n      }\n    };\n    COUNTRIES.greece = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        //eight character numbers should be prefixed with an 0.\n        if (vat.length === 8) {\n          vat = '0' + vat;\n        }\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 8; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // Establish check digit.\n        total = total % 11;\n        if (total > 9) {\n          total = 0;\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9);\n        return total === expect;\n      },\n      rules: {\n        multipliers: [\n          256,\n          128,\n          64,\n          32,\n          16,\n          8,\n          4,\n          2\n        ],\n        regex: /^(EL)(\\d{9})$/\n      }\n    };\n    COUNTRIES.hungary = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 7; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // Establish check digit.\n        total = 10 - total % 10;\n        if (total === 10) total = 0;\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(7, 8);\n        return total === expect;\n      },\n      rules: {\n        multipliers: [\n          9,\n          7,\n          3,\n          1,\n          9,\n          7,\n          3\n        ],\n        regex: /^(HU)(\\d{8})$/\n      }\n    };\n    COUNTRIES.ireland = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        // If the code is type 1 format, we need to convert it to the new before performing the validation.\n        if (this.rules.typeFormats.first.test(vat)) {\n          vat = '0' + vat.substring(2, 7) + vat.substring(0, 1) + vat.substring(7, 8);\n        }\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 7; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // If the number is type 3 then we need to include the trailing A or H in the calculation\n        if (this.rules.typeFormats.third.test(vat)) {\n          // Add in a multiplier for the character A (1*9=9) or H (8*9=72)\n          if (vat.charAt(8) === 'H') {\n            total += 72;\n          } else {\n            total += 9;\n          }\n        }\n\n        // Establish check digit using modulus 23, and translate to char. equivalent.\n        total = total % 23;\n        if (total === 0) {\n          total = 'W';\n        } else {\n          total = String.fromCharCode(total + 64);\n        }\n\n        // Compare it with the eighth character of the VAT number. If it's the same, then it's valid.\n        expect = vat.slice(7, 8);\n        return total === expect;\n      },\n      rules: {\n        multipliers: [\n          8,\n          7,\n          6,\n          5,\n          4,\n          3,\n          2\n        ],\n        typeFormats: {\n          first: /^\\d[A-Z\\*\\+]/,\n          third: /^\\d{7}[A-Z][AH]$/\n        },\n        regex: [\n          /^(IE)(\\d{7}[A-W])$/,\n          /^(IE)([7-9][A-Z\\*\\+)]\\d{5}[A-W])$/,\n          /^(IE)(\\d{7}[A-W][AH])$/\n        ]\n      }\n    };\n    COUNTRIES.italy = {\n      calcs: function(vat) {\n        var total = 0;\n        var temp;\n        var expect;\n\n        // The last three digits are the issuing office, and cannot exceed more 201, unless 999 or 888\n        if (+vat.slice(0, 7) === 0) {\n          return false;\n        }\n\n        temp = +vat.slice(7, 10);\n        if ((temp < 1) || (temp > 201) && temp !== 999 && temp !== 888) {\n          return false;\n        }\n\n        // Extract the next digit and multiply by the appropriate\n        for (var i = 0; i < 10; i++) {\n          temp = +vat.charAt(i) * this.rules.multipliers[i];\n          if (temp > 9)\n            total += Math.floor(temp / 10) + temp % 10;\n          else\n            total += temp;\n        }\n\n        // Establish check digit.\n        total = 10 - total % 10;\n        if (total > 9) {\n          total = 0;\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(10, 11);\n        return total === expect;\n      },\n      rules: {\n        multipliers: [\n          1,\n          2,\n          1,\n          2,\n          1,\n          2,\n          1,\n          2,\n          1,\n          2\n        ],\n        regex: /^(IT)(\\d{11})$/\n      }\n    };\n    COUNTRIES.latvia = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        // Differentiate between legal entities and natural bodies. For the latter we simply check that\n        // the first six digits correspond to valid DDMMYY dates.\n        if ((/^[0-3]/).test(vat)) {\n          return !!(/^[0-3][0-9][0-1][0-9]/).test(vat);\n        } else {\n\n          // Extract the next digit and multiply by the counter.\n          for (var i = 0; i < 10; i++) {\n            total += +vat.charAt(i) * this.rules.multipliers[i];\n          }\n\n          // Establish check digits by getting modulus 11.\n          if (total % 11 === 4 && vat[0] === 9) total = total - 45;\n\n          if (total % 11 === 4) {\n            total = 4 - total % 11;\n          } else if (total % 11 > 4) {\n            total = 14 - total % 11;\n          } else if (total % 11 < 4) {\n            total = 3 - total % 11;\n          }\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          expect = +vat.slice(10, 11);\n          return total === expect;\n        }\n      },\n      rules: {\n        multipliers: [\n          9,\n          1,\n          4,\n          8,\n          3,\n          10,\n          2,\n          5,\n          7,\n          6\n        ],\n        regex: /^(LV)(\\d{11})$/\n      }\n    };\n    COUNTRIES.lithunia = (function() {\n\n      function _extractDigit(vat, multiplier, key) {\n        return +vat.charAt(key) * multiplier[key];\n      }\n\n\n      function _doubleCheckCalculation(vat, total, rules) {\n        if (total % 11 === 10) {\n          total = 0;\n          for (var i = 0; i < 8; i++) {\n            total += _extractDigit(vat, rules.multipliers.short, i);\n          }\n        }\n\n        return total;\n      }\n\n      function extractDigit(vat, total) {\n        for (var i = 0; i < 8; i++) {\n          total += +vat.charAt(i) * (i + 1);\n        }\n        return total;\n      }\n\n      function checkDigit(total) {\n        total = total % 11;\n        if (total === 10) {\n          total = 0;\n        }\n\n        return total;\n      }\n\n      function _check9DigitVat(vat, rules) {\n        // 9 character VAT numbers are for legal persons\n        var total = 0;\n        if (vat.length === 9) {\n\n          // 8th character must be one\n          if (!(/^\\d{7}1/).test(vat)) return false;\n\n          // Extract the next digit and multiply by the counter+1.\n          total = extractDigit(vat, total);\n\n          // Can have a double check digit calculation!\n          total = _doubleCheckCalculation(vat, total, rules);\n\n          // Establish check digit.\n          total = checkDigit(total);\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          var expect = +vat.slice(8, 9);\n          return total === expect;\n        }\n        return false;\n      }\n\n      function extractDigit12(vat, total, rules) {\n        for (var k = 0; k < 11; k++) {\n          total += _extractDigit(vat, rules.multipliers.med, k);\n        }\n        return total;\n      }\n\n      function _doubleCheckCalculation12(vat, total, rules) {\n        if (total % 11 === 10) {\n          total = 0;\n          for (var l = 0; l < 11; l++) {\n            total += _extractDigit(vat, rules.multipliers.alt, l);\n          }\n        }\n\n        return total;\n      }\n\n      function _check12DigitVat(vat, rules) {\n        var total = 0;\n\n        // 12 character VAT numbers are for temporarily registered taxpayers\n        if (vat.length === 12) {\n\n          // 11th character must be one\n          if (!(rules.check).test(vat)) return false;\n\n          // Extract the next digit and multiply by the counter+1.\n          total = extractDigit12(vat, total, rules);\n\n          // Can have a double check digit calculation!\n          total = _doubleCheckCalculation12(vat, total, rules);\n\n          // Establish check digit.\n          total = checkDigit(total);\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          var expect = +vat.slice(11, 12);\n          return total === expect;\n        }\n\n        return false;\n      }\n\n      return {\n        calcs: function(vat) {\n          return _check9DigitVat(vat, this.rules) || _check12DigitVat(vat, this.rules);\n        },\n        rules: {\n          multipliers: {\n            short: [\n              3,\n              4,\n              5,\n              6,\n              7,\n              8,\n              9,\n              1\n            ],\n            med: [\n              1,\n              2,\n              3,\n              4,\n              5,\n              6,\n              7,\n              8,\n              9,\n              1,\n              2\n            ],\n            alt: [\n              3,\n              4,\n              5,\n              6,\n              7,\n              8,\n              9,\n              1,\n              2,\n              3,\n              4\n            ]\n          },\n          check: /^\\d{10}1/,\n          regex: /^(LT)(\\d{9}|\\d{12})$/\n        }\n      };\n    }());\n    COUNTRIES.luxembourg = {\n      calcs: function(vat) {\n        var expect = +vat.slice(6, 8);\n        var checkDigit = +vat.slice(0, 6) % 89;\n        // Checks the check digits of a Luxembourg VAT number.\n\n        return checkDigit === expect;\n      },\n      rules: {\n        regex: /^(LU)(\\d{8})$/\n      }\n    };\n    COUNTRIES.malta = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 6; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // Establish check digits by getting modulus 37.\n        total = 37 - total % 37;\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(6, 8);\n        return total === expect;\n      },\n      rules: {\n        multipliers: [\n          3,\n          4,\n          6,\n          7,\n          8,\n          9\n        ],\n        regex: /^(MT)([1-9]\\d{7})$/\n      }\n    };\n    COUNTRIES.netherlands = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 8; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // Establish check digits by getting modulus 11.\n        total = total % 11;\n        if (total > 9) {\n          total = 0;\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9);\n        return total === expect;\n      },\n      rules: {\n        multipliers: [\n          9,\n          8,\n          7,\n          6,\n          5,\n          4,\n          3,\n          2\n        ],\n        regex: /^(NL)(\\d{9})B\\d{2}$/\n      }\n    };\n    COUNTRIES.norway = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n        // See http://www.brreg.no/english/coordination/number.html\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 8; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // Establish check digits by getting modulus 11. Check digits > 9 are invalid\n        total = 11 - total % 11;\n\n        if (total === 11) {\n          total = 0;\n        }\n\n        if (total < 10) {\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          expect = +vat.slice(8, 9);\n          return total === expect;\n        }\n      },\n      rules: {\n        multipliers: [\n          3,\n          2,\n          7,\n          6,\n          5,\n          4,\n          3,\n          2\n        ],\n        regex: /^(NO)(\\d{9})$/\n      }\n    };\n    COUNTRIES.poland = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 9; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // Establish check digits subtracting modulus 11 from 11.\n        total = total % 11;\n        if (total > 9) {\n          total = 0;\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(9, 10);\n        return total === expect;\n      },\n      rules: {\n        multipliers: [\n          6,\n          5,\n          7,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7\n        ],\n        regex: /^(PL)(\\d{10})$/\n      }\n    };\n    COUNTRIES.portugal = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 8; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // Establish check digits subtracting modulus 11 from 11.\n        total = 11 - total % 11;\n        if (total > 9) {\n          total = 0;\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9);\n        return total === expect;\n      },\n      rules: {\n        multipliers: [\n          9,\n          8,\n          7,\n          6,\n          5,\n          4,\n          3,\n          2\n        ],\n        regex: /^(PT)(\\d{9})$/\n      }\n    };\n    COUNTRIES.romania = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        // Extract the next digit and multiply by the counter.\n        var vatLength = vat.length;\n        var multipliers = this.rules.multipliers.slice(10 - vatLength);\n\n        for (var i = 0; i < vat.length - 1; i++) {\n          total += +vat.charAt(i) * multipliers[i];\n        }\n\n        // Establish check digits by getting modulus 11.\n        total = (10 * total) % 11;\n        if (total === 10) total = 0;\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(vat.length - 1, vat.length);\n        return total === expect;\n      },\n      rules: {\n        multipliers: [\n          7,\n          5,\n          3,\n          2,\n          1,\n          7,\n          5,\n          3,\n          2\n        ],\n        regex: /^(RO)([1-9]\\d{1,9})$/\n      }\n    };\n    COUNTRIES.russia = (function() {\n\n      function _check10DigitINN(vat, rules) {\n        var total = 0;\n\n        if (vat.length === 10) {\n\n          for (var i = 0; i < 10; i++) {\n            total += +vat.charAt(i) * rules.multipliers.m_1[i];\n          }\n\n          total = total % 11;\n          if (total > 9) {\n            total = total % 10;\n          }\n\n          // Compare it with the last character of the VAT number. If it is the same, then it's valid\n          var expect = +vat.slice(9, 10);\n          return total === expect;\n        }\n\n        return false;\n      }\n\n      function _check12DigitINN(vat, rules) {\n        var total1 = 0;\n        var total2 = 0;\n\n        if (vat.length === 12) {\n\n          for (var j = 0; j < 11; j++) {\n            total1 += +vat.charAt(j) * rules.multipliers.m_2[j];\n          }\n\n          total1 = total1 % 11;\n\n          if (total1 > 9) {\n            total1 = total1 % 10;\n          }\n\n          for (var k = 0; k < 11; k++) {\n            total2 += +vat.charAt(k) * rules.multipliers.m_3[k];\n          }\n\n          total2 = total2 % 11;\n          if (total2 > 9) {\n            total2 = total2 % 10;\n          }\n\n          // Compare the first check with the 11th character and the second check with the 12th and last\n          // character of the VAT number. If they're both the same, then it's valid\n          var expect = (total1 === +vat.slice(10, 11));\n          var expect2 = (total2 === +vat.slice(11, 12));\n          return (expect) && (expect2);\n        }\n\n        return false;\n      }\n\n\n      return {\n        calcs: function(vat) {\n          // See http://russianpartner.biz/test_inn.html for algorithm\n          return _check10DigitINN(vat, this.rules) || _check12DigitINN(vat, this.rules);\n        },\n        rules: {\n          multipliers: {\n            m_1: [\n              2,\n              4,\n              10,\n              3,\n              5,\n              9,\n              4,\n              6,\n              8,\n              0\n            ],\n            m_2: [\n              7,\n              2,\n              4,\n              10,\n              3,\n              5,\n              9,\n              4,\n              6,\n              8,\n              0\n            ],\n            m_3: [\n              3,\n              7,\n              2,\n              4,\n              10,\n              3,\n              5,\n              9,\n              4,\n              6,\n              8,\n              0\n            ]\n          },\n          regex: /^(RU)(\\d{10}|\\d{12})$/\n        }\n      };\n    }());\n    COUNTRIES.serbia = {\n      calcs: function(vat) {\n        // Checks the check digits of a Serbian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n        var product = 10;\n        var sum = 0;\n        var checkDigit;\n\n        for (var i = 0; i < 8; i++) {\n\n          // Extract the next digit and implement the algorithm\n          sum = (+vat.charAt(i) + product) % 10;\n          if (sum === 0) {\n            sum = 10;\n          }\n          product = (2 * sum) % 11;\n        }\n\n        // Now check that we have the right check digit\n        var expect = 1;\n        checkDigit = (product + (+vat.slice(8, 9))) % 10;\n        return checkDigit === expect;\n      },\n      rules: {\n        regex: /^(RS)(\\d{9})$/\n      }\n    };\n    COUNTRIES.slovakia_republic = {\n      calcs: function(vat) {\n        var expect = 0;\n        var checkDigit = (vat % 11);\n        return checkDigit === expect;\n      },\n      rules: {\n        regex: /^(SK)([1-9]\\d[2346-9]\\d{7})$/\n      }\n    };\n    COUNTRIES.slovenia = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 7; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // Establish check digits using modulus 11\n        total = 11 - total % 11;\n        if (total === 10) {\n          total = 0;\n        }\n\n        // Compare the number with the last character of the VAT number. If it is the\n        // same, then it's a valid check digit.\n        expect = +vat.slice(7, 8);\n        return !!(total !== 11 && total === expect);\n      },\n      rules: {\n        multipliers: [\n          8,\n          7,\n          6,\n          5,\n          4,\n          3,\n          2\n        ],\n        regex: /^(SI)([1-9]\\d{7})$/\n      }\n    };\n    COUNTRIES.spain = {\n      calcs: function(vat) {\n        var i = 0;\n        var total = 0;\n        var temp;\n        var expect;\n\n        // National juridical entities\n        if (this.rules.additional[0].test(vat)) {\n\n          // Extract the next digit and multiply by the counter.\n          for (i = 0; i < 7; i++) {\n            temp = vat.charAt(i + 1) * this.rules.multipliers[i];\n            if (temp > 9)\n              total += Math.floor(temp / 10) + temp % 10;\n            else\n              total += temp;\n          }\n          // Now calculate the check digit itself.\n          total = 10 - total % 10;\n          if (total === 10) {\n            total = 0;\n          }\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          expect = +vat.slice(8, 9);\n          return total === expect;\n        }\n\n        // Juridical entities other than national ones\n        else if (this.rules.additional[1].test(vat)) {\n\n          // Extract the next digit and multiply by the counter.\n          for (i = 0; i < 7; i++) {\n            temp = vat.charAt(i + 1) * this.rules.multipliers[i];\n            if (temp > 9)\n              total += Math.floor(temp / 10) + temp % 10;\n            else\n              total += temp;\n          }\n\n          // Now calculate the check digit itself.\n          total = 10 - total % 10;\n          total = String.fromCharCode(total + 64);\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          expect = vat.slice(8, 9);\n          return total === expect;\n        }\n\n        // Personal number (NIF) (starting with numeric of Y or Z)\n        else if (this.rules.additional[2].test(vat)) {\n          var tempnumber = vat;\n          if (tempnumber.substring(0, 1) === 'Y') tempnumber = tempnumber.replace(/Y/, '1');\n          if (tempnumber.substring(0, 1) === 'Z') tempnumber = tempnumber.replace(/Z/, '2');\n          expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+tempnumber.substring(0, 8) % 23);\n          return tempnumber.charAt(8) === expect;\n        }\n\n        // Personal number (NIF) (starting with K, L, M, or X)\n        else if (this.rules.additional[3].test(vat)) {\n          expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+vat.substring(1, 8) % 23);\n          return vat.charAt(8) === expect;\n        } else return false;\n      },\n      rules: {\n        multipliers: [\n          2,\n          1,\n          2,\n          1,\n          2,\n          1,\n          2\n        ],\n        regex: [\n          /^(ES)([A-Z]\\d{8})$/,\n          /^(ES)([A-HN-SW]\\d{7}[A-J])$/,\n          /^(ES)([0-9YZ]\\d{7}[A-Z])$/,\n          /^(ES)([KLMX]\\d{7}[A-Z])$/\n        ],\n        additional: [\n          /^[A-H|J|U|V]\\d{8}$/,\n          /^[A-H|N-S|W]\\d{7}[A-J]$/,\n          /^[0-9|Y|Z]\\d{7}[A-Z]$/,\n          /^[K|L|M|X]\\d{7}[A-Z]$/\n        ]\n      }\n    };\n    COUNTRIES.sweden = {\n      calcs: function(vat) {\n        var expect;\n\n        // Calculate R where R = R1 + R3 + R5 + R7 + R9, and Ri = INT(Ci/5) + (Ci*2) modulo 10\n        var R = 0;\n        var digit;\n        for (var i = 0; i < 9; i = i + 2) {\n          digit = +vat.charAt(i);\n          R += Math.floor(digit / 5) + ((digit * 2) % 10);\n        }\n\n        // Calculate S where S = C2 + C4 + C6 + C8\n        var S = 0;\n        for (var j = 1; j < 9; j = j + 2) {\n          S += +vat.charAt(j);\n        }\n\n        var checkDigit = (10 - (R + S) % 10) % 10;\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(9, 10);\n\n        return checkDigit === expect;\n      },\n      rules: {\n        regex: /^(SE)(\\d{10}01)$/\n      }\n    };\n    COUNTRIES.switzerland = {\n      calcs: function(vat) {\n        var total = 0;\n        for (var i = 0; i < 8; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // Establish check digit.\n        total = 11 - total % 11;\n        if (total === 10) return false;\n        if (total === 11) total = 0;\n\n        // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n        var expect = +vat.substr(8, 1);\n        return total === expect;\n      },\n      rules: {\n        multipliers: [\n          5,\n          4,\n          3,\n          2,\n          7,\n          6,\n          5,\n          4\n        ],\n        regex: /^(CHE)(\\d{9})(MWST)?$/\n      }\n    };\n    COUNTRIES.united_kingdom = {\n      calcs: function(vat) {\n        var total = 0;\n        var expect;\n\n        // Government departments\n        if (vat.substr(0, 2) === 'GD') {\n          expect = 500;\n          return vat.substr(2, 3) < expect;\n        }\n\n        // Health authorities\n        if (vat.substr(0, 2) === 'HA') {\n          expect = 499;\n          return vat.substr(2, 3) > expect;\n        }\n\n        // Standard and commercial numbers\n\n\n        // 0 VAT numbers disallowed!\n        if (+vat.slice(0) === 0) return false;\n\n        // Check range is OK for modulus 97 calculation\n        var no = +vat.slice(0, 7);\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 7; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // Old numbers use a simple 97 modulus, but new numbers use an adaptation of that (less 55). Our\n        // VAT number could use either system, so we check it against both.\n\n        // Establish check digits by subtracting 97 from total until negative.\n        var checkDigit = total;\n        while (checkDigit > 0) {\n          checkDigit = checkDigit - 97;\n        }\n\n        // Get the absolute value and compare it with the last two characters of the VAT number. If the\n        // same, then it is a valid traditional check digit. However, even then the number must fit within\n        // certain specified ranges.\n        checkDigit = Math.abs(checkDigit);\n        if (checkDigit === +vat.slice(7, 9) && no < 9990001 && (no < 100000 || no > 999999) && (no < 9490001 || no > 9700000)) return true;\n\n        // Now try the new method by subtracting 55 from the check digit if we can - else add 42\n        if (checkDigit >= 55)\n          checkDigit = checkDigit - 55;\n        else\n          checkDigit = checkDigit + 42;\n        expect = +vat.slice(7, 9);\n        return !!(checkDigit === expect && no > 1000000);\n      },\n      rules: {\n        multipliers: [\n          8,\n          7,\n          6,\n          5,\n          4,\n          3,\n          2\n        ],\n        regex: [\n          /^(GB)?(\\d{9})$/,\n          /^(GB)?(\\d{12})$/,\n          /^(GB)?(GD\\d{3})$/,\n          /^(GB)?(HA\\d{3})$/\n        ]\n      }\n    };\n\n    //Support of node.js\n\n    if (typeof module === 'object' && module.exports) module.exports = exports;\n\n    return exports;\n\n  })();\n\n  return jsvat;\n});"],"sourceRoot":"/source/"}