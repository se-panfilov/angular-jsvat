{"version":3,"sources":["angular-jsvat.js"],"names":["angular","module","factory","_validateRegexp","vat","regexp","test","_validateRules","countryName","parsedNum","exec","number","_checks","_validate","result","_REGEXP_LIST","austria","belgium","bulgaria","switzerland","cyprus","czech_republic","germany","denmark","estonia","greece","spain","europe","finland","france","united_kingdom","croatia","hungary","ireland","italy","latvia","lithunia","luxembourg","malta","netherlands","norway","poland","portugal","romania","russia","serbia","slovenia","slovakia_republic","sweden","exports","checkVAT","toString","toUpperCase","replace","hasOwnProperty","Array","isArray","i","length","temp","expect","total","multipliers","charAt","Math","floor","slice","check","checkNineLengthVat","j","isPhysicalPerson","month","k","substr","isForeigner","l","miscellaneousVAT","m","String","fromCharCode","czExp","lookup","product","sum","checkDigit","esExp","tempnumber","substring","no","abs","vatLength","expect2","total1","multipliers1","total2","multipliers2","digit","R","S","VatChecker"],"mappings":"AAAAA,QAAQC,OAAO,YAEVC,QAAQ,eAAgB,YAEjB,WACR,YAyDA,SAASC,GAAgBC,EAAKC,GAC1B,MAAOA,GAAOC,KAAKF,GAGvB,QAASG,GAAeH,EAAKC,EAAQG,GACjC,GAAIC,GAAYJ,EAAOK,KAAKN,GAGxBO,EAASF,EAAU,EAGvB,OAAOG,GAAQJ,GAAaG,GAGhC,QAASE,GAAUT,EAAKC,EAAQG,GAC5B,GAAIM,IAAS,CAIb,OAHIX,GAAgBC,EAAKC,KACrBS,EAASP,EAAeH,EAAKC,EAAQG,IAElCM,EA1EX,GAAIC,IACAC,QAAS,iBACTC,QAAS,kBACTC,SAAU,mBACVC,YAAa,wBACbC,OAAQ,2BACRC,eAAgB,2BAChBC,QAAS,qBACTC,QAAS,gBACTC,QAAS,kBACTC,OAAQ,gBACRC,OACI,qBACA,8BACA,4BACA,4BAEJC,OAAQ,gBACRC,QAAS,gBACTC,QACI,iBACA,4BACA,6BACA,+BAEJC,gBACI,iBACA,kBACA,mBACA,oBAEJC,QAAS,iBACTC,QAAS,gBACTC,SACI,qBACA,oCACA,0BAEJC,MAAO,iBACPC,OAAQ,iBACRC,SAAU,uBACVC,WAAY,gBACZC,MAAO,qBACPC,YAAa,sBACbC,OAAQ,gBACRC,OAAQ,iBACRC,SAAU,gBACVC,QAAS,uBACTC,OAAQ,wBACRC,OAAQ,gBACRC,SAAU,qBACVC,kBAAmB,+BACnBC,OAAQ,oBAyBRC,GACAC,SAAU,SAAU9C,GAChB,IAAKA,EAAK,OAAO,CACjBA,GAAMA,EAAI+C,WAAWC,cAAcC,QAAQ,cAAe,GAE1D,KAAK,GAAI7C,KAAeO,GACpB,GAAIA,EAAauC,eAAe9C,GAAc,CAC1C,GAAIH,GAASU,EAAaP,EAG1B,IAAI+C,MAAMC,QAAQnD,IACd,IAAK,GAAIoD,GAAI,EAAGA,EAAIpD,EAAOqD,OAAQD,IAC/B,GAAI5C,EAAUT,EAAKC,EAAOoD,GAAIjD,GAAc,OAAO,MAGvD,IAAIK,EAAUT,EAAKC,EAAQG,GAAc,OAAO,EAI5D,OAAO,IAKXI,GACAI,QAAS,SAAUZ,GAMf,IAAK,GAHDuD,GACAC,EAHAC,EAAQ,EACRC,GAAe,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAI5BL,EAAI,EAAO,EAAJA,EAAOA,IACnBE,EAAOvD,EAAI2D,OAAON,GAAKK,EAAYL,GAE/BI,GADAF,EAAO,EACEK,KAAKC,MAAMN,EAAO,IAAMA,EAAO,GAE/BA,CAQjB,OALAE,GAAQ,IAAMA,EAAQ,GAAK,GACb,KAAVA,IAAcA,EAAQ,GAE1BD,GAAUxD,EAAI8D,MAAM,EAAG,GAEhBL,IAAUD,GAErB3C,QAAS,SAAUb,GACf,GAAIwD,GACAO,CAEJ,OADmB,KAAf/D,EAAIsD,SAActD,EAAM,IAAMA,GACT,KAApBA,EAAI8D,MAAM,EAAG,IAAiB,GAEnCC,EAAS,IAAM/D,EAAI8D,MAAM,EAAG,GAAK,GACjCN,GAAUxD,EAAI8D,MAAM,EAAG,IAChBC,IAAUP,IAErB1C,SAAU,SAAUd,GAChB,GAAIwD,GACAE,EACAH,EACAE,EAEAO,EAAqB,WAErBT,EAAO,CACP,KAAK,GAAIF,GAAI,EAAO,EAAJA,EAAOA,IACnBE,IAASvD,EAAI2D,OAAON,IAAMA,EAAI,EAIlC,IADAI,EAAQF,EAAO,GACD,KAAVE,EAEA,MADAD,IAAUxD,EAAI8D,MAAM,GACbL,IAAUD,CAGrBD,GAAO,CACP,KAAK,GAAIU,GAAI,EAAO,EAAJA,EAAOA,IACnBV,IAASvD,EAAI2D,OAAOM,IAAMA,EAAI,EAOlC,OAJAR,GAAQF,EAAO,GACD,KAAVE,IAAcA,EAAQ,GAC1BD,GAAUxD,EAAI8D,MAAM,GAEbL,IAAUD,GAGjBU,EAAmB,WAEnB,GAAI,4BAA8BhE,KAAKF,GAAM,CAEzC,GAAImE,IAASnE,EAAI8D,MAAM,EAAG,EAC1B,IAAKK,EAAQ,GAAa,GAARA,GAAgBA,EAAQ,IAAc,GAARA,GAAgBA,EAAQ,IAAc,GAARA,EAAa,CAGvFT,GAAe,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GACxCD,EAAQ,CACR,KAAK,GAAIW,GAAI,EAAO,EAAJA,EAAOA,IACnBX,IAAUzD,EAAI2D,OAAOS,GAAKV,EAAYU,EAO1C,IAJAX,GAAgB,GACF,KAAVA,IAAcA,EAAQ,GAGtBA,KAAWzD,EAAIqE,OAAO,EAAG,GAAI,OAAO,GAIhD,OAAO,GAKPC,EAAc,WAEdZ,GAAe,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,GAC5CD,EAAQ,CACR,KAAK,GAAIc,GAAI,EAAO,EAAJA,EAAOA,IACnBd,IAAUzD,EAAI2D,OAAOY,GAAKb,EAAYa,EAI1C,OAAId,GAAQ,MAAQzD,EAAIqE,OAAO,EAAG,IACvB,EADX,QAKAG,EAAmB,WAInBd,GAAe,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACvCD,EAAQ,CACR,KAAK,GAAIgB,GAAI,EAAO,EAAJA,EAAOA,IACnBhB,IAAUzD,EAAI2D,OAAOc,GAAKf,EAAYe,EAK1C,OADAhB,GAAQ,GAAKA,EAAQ,GACP,KAAVA,GAAqB,GACX,KAAVA,IAAcA,EAAQ,GAG1BD,GAAUxD,EAAIqE,OAAO,EAAG,GACjBZ,IAAUD,GAGrB,OAAmB,KAAfxD,EAAIsD,OACGU,IAEAE,KAAsBI,KAAiBE,KAItDzD,YAAa,SAAUf,GAQnB,IAAK,GAPDwD,GAKAE,GAAe,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACpCD,EAAQ,EACHJ,EAAI,EAAO,EAAJA,EAAOA,IAAKI,IAAUzD,EAAI2D,OAAON,GAAKK,EAAYL,EAIlE,OADAI,GAAQ,GAAKA,EAAQ,GACP,KAAVA,GAAqB,GACX,KAAVA,IAAcA,EAAQ,GAG1BD,GAAUxD,EAAIqE,OAAO,EAAG,GACjBZ,IAAUD,IAErBxC,OAAQ,SAAUhB,GACd,GAAIwD,EAKJ,IAAyB,MAApBxD,EAAI8D,MAAM,EAAG,GAAW,OAAO,CAIpC,KAAK,GADDL,GAAQ,EACHJ,EAAI,EAAO,EAAJA,EAAOA,IAAK,CACxB,GAAIE,IAAQvD,EAAI2D,OAAON,EACvB,IAAIA,EAAI,IAAM,EACV,OAAQE,GACJ,IAAK,GACDA,EAAO,CACP,MACJ,KAAK,GACDA,EAAO,CACP,MACJ,KAAK,GACDA,EAAO,CACP,MACJ,KAAK,GACDA,EAAO,CACP,MACJ,KAAK,GACDA,EAAO,CACP,MACJ,SACIA,EAAc,EAAPA,EAAW,EAG9BE,GAASF,EASb,MALAE,IAAgB,GAChBA,EAAQiB,OAAOC,aAAalB,EAAQ,IAGpCD,EAASxD,EAAIqE,OAAO,EAAG,GAChBZ,IAAUD,GAErBvC,eAAgB,SAAUjB,GACtB,GAAIwD,GAIAC,EAAQ,EACRC,GAAe,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAEjCkB,IAOJ,IANAA,EAAM,GAAK,UACXA,EAAM,GAAK,sCACXA,EAAM,GAAK,WACXA,EAAM,GAAK,iCAGPA,EAAM,GAAG1E,KAAKF,GAAM,CAGpB,IAAK,GAAIqD,GAAI,EAAO,EAAJA,EAAOA,IACnBI,IAAUzD,EAAI2D,OAAON,GAAKK,EAAYL,EAU1C,OANAI,GAAQ,GAAKA,EAAQ,GACP,KAAVA,IAAcA,EAAQ,GACZ,KAAVA,IAAcA,EAAQ,GAG1BD,GAAUxD,EAAI8D,MAAM,EAAG,GAChBL,IAAUD,EAWhB,GAAIoB,EAAM,GAAG1E,KAAKF,GAAM,CAGzB,IAAK,GAAIiE,GAAI,EAAO,EAAJA,EAAOA,IACnBR,IAAUzD,EAAI2D,OAAOM,EAAI,GAAKP,EAAYO,EAI9CR,GAAQ,GAAKA,EAAQ,GACP,KAAVA,IAAcA,EAAQ,GACZ,KAAVA,IAAcA,EAAQ,EAG1B,IAAIoB,IAAU,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAE5C,OADArB,IAAUxD,EAAI8D,MAAM,EAAG,GAChBe,EAAOpB,EAAQ,KAAOD,EAI5B,GAAIoB,EAAM,GAAG1E,KAAKF,GAAM,CACzB,GAAIuD,IAAQvD,EAAI8D,MAAM,EAAG,GAAK9D,EAAI8D,MAAM,EAAG,GAAK9D,EAAI8D,MAAM,EAAG,GAAK9D,EAAI8D,MAAM,EAAG,GAAK9D,EAAI8D,MAAM,EAE9F,OADAN,IAAUxD,EAAM,KAAO,IACbuD,EAAO,KAAO,IAAKC,GAIjC,OAAO,GAEXtC,QAAS,SAAUlB,GAQf,IAAK,GAPDwD,GAIAsB,EAAU,GACVC,EAAM,EACNC,EAAa,EACR3B,EAAI,EAAO,EAAJA,EAAOA,IAGnB0B,IAAQ/E,EAAI2D,OAAON,GAAKyB,GAAW,GACvB,IAARC,IACAA,EAAM,IAEVD,EAAW,EAAIC,EAAO,EAa1B,OARIC,GADA,GAAKF,IAAY,GACJ,EAEA,GAAKA,EAKtBtB,GAAUxD,EAAI8D,MAAM,EAAG,GAChBkB,IAAexB,GAE1BrC,QAAS,SAAUnB,GAIf,IAAK,GAHDyD,GAAQ,EACRC,GAAe,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAE/BL,EAAI,EAAO,EAAJA,EAAOA,IAAKI,IAAUzD,EAAI2D,OAAON,GAAKK,EAAYL,EAElE,OAAOI,GAAQ,KAAO,GAE1BrC,QAAS,SAAUpB,GASf,IAAK,GARDwD,GAIAC,EAAQ,EACRC,GAAe,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAG/BL,EAAI,EAAO,EAAJA,EAAOA,IAAKI,IAAUzD,EAAI2D,OAAON,GAAKK,EAAYL,EAQlE,OALAI,GAAQ,GAAKA,EAAQ,GACP,KAAVA,IAAcA,EAAQ,GAG1BD,GAAUxD,EAAI8D,MAAM,EAAG,GAChBL,IAAUD,GAErBnC,OAAQ,SAAUrB,GACd,GAAIwD,GAIAC,EAAQ,EACRC,GAAe,IAAK,IAAK,GAAI,GAAI,GAAI,EAAG,EAAG,EAG5B,KAAf1D,EAAIsD,SACJtD,EAAM,IAAMA,EAIhB,KAAK,GAAIqD,GAAI,EAAO,EAAJA,EAAOA,IAAKI,IAAUzD,EAAI2D,OAAON,GAAKK,EAAYL,EAUlE,OAPAI,IAAgB,GACZA,EAAQ,IACRA,EAAQ,GAIZD,GAAUxD,EAAI8D,MAAM,EAAG,GAChBL,IAAUD,GAErBlC,MAAO,SAAUtB,GACb,GAAIwD,GAIAC,EAAQ,EACRF,EAAO,EACPG,GAAe,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACjCuB,IACJA,GAAM,GAAK,qBACXA,EAAM,GAAK,0BACXA,EAAM,GAAK,wBACXA,EAAM,GAAK,uBACX,IAAI5B,GAAI,CAGR,IAAI4B,EAAM,GAAG/E,KAAKF,GAAM,CAGpB,IAAKqD,EAAI,EAAO,EAAJA,EAAOA,IACfE,EAAOvD,EAAI2D,OAAON,EAAI,GAAKK,EAAYL,GAEnCI,GADAF,EAAO,EACEK,KAAKC,MAAMN,EAAO,IAAMA,EAAO,GAE/BA,CAUjB,OAPAE,GAAQ,GAAKA,EAAQ,GACP,KAAVA,IACAA,EAAQ,GAIZD,GAAUxD,EAAI8D,MAAM,EAAG,GAChBL,IAAUD,EAIhB,GAAIyB,EAAM,GAAG/E,KAAKF,GAAM,CAGzB,IAAKqD,EAAI,EAAO,EAAJA,EAAOA,IACfE,EAAOvD,EAAI2D,OAAON,EAAI,GAAKK,EAAYL,GAEnCI,GADAF,EAAO,EACEK,KAAKC,MAAMN,EAAO,IAAMA,EAAO,GAE/BA,CASjB,OALAE,GAAQ,GAAKA,EAAQ,GACrBA,EAAQiB,OAAOC,aAAalB,EAAQ,IAGpCD,EAASxD,EAAI8D,MAAM,EAAG,GACfL,IAAUD,EAIhB,GAAIyB,EAAM,GAAG/E,KAAKF,GAAM,CACzB,GAAIkF,GAAalF,CAIjB,OAHmC,MAA/BkF,EAAWC,UAAU,EAAG,KAAYD,EAAaA,EAAWjC,QAAQ,IAAK,MAC1C,MAA/BiC,EAAWC,UAAU,EAAG,KAAYD,EAAaA,EAAWjC,QAAQ,IAAK,MAC7EO,EAAS,0BAA0BG,QAAQuB,EAAWC,UAAU,EAAG,GAAK,IACjED,EAAWvB,OAAO,KAAOH,EAI/B,MAAIyB,GAAM,GAAG/E,KAAKF,IACnBwD,EAAS,0BAA0BG,QAAQ3D,EAAImF,UAAU,EAAG,GAAK,IAC1DnF,EAAI2D,OAAO,KAAOH,IAGjB,GAEhBjC,OAAQ,WAIJ,OAAO,GAEXC,QAAS,SAAUxB,GASf,IAAK,GARDwD,GAIAC,EAAQ,EACRC,GAAe,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAG7BL,EAAI,EAAO,EAAJA,EAAOA,IAAKI,IAAUzD,EAAI2D,OAAON,GAAKK,EAAYL,EAUlE,OAPAI,GAAQ,GAAKA,EAAQ,GACjBA,EAAQ,IACRA,EAAQ,GAIZD,GAAUxD,EAAI8D,MAAM,EAAG,GAChBL,IAAUD,GAErB/B,OAAQ,SAAUzB,GACd,GAAIwD,EAIJ,KAAK,WAAatD,KAAKF,GACnB,OAAO,CAIX,IAAIyD,IAASzD,EAAImF,UAAU,EAO3B,OAJA1B,IAAiB,IAARA,EAAc,IAAM,GAG7BD,GAAUxD,EAAI8D,MAAM,EAAG,GAChBL,IAAUD,GAErB9B,eAAgB,SAAU1B,GACtB,GAAIwD,GAIAE,GAAe,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAGrC,IAAyB,OAArB1D,EAAIqE,OAAO,EAAG,GAEd,MADAb,GAAS,IACFxD,EAAIqE,OAAO,EAAG,GAAKb,CAI9B,IAAyB,OAArBxD,EAAIqE,OAAO,EAAG,GAEd,MADAb,GAAS,IACFxD,EAAIqE,OAAO,EAAG,GAAKb,CAI9B,IAAIC,GAAQ,CAGZ,IAAsB,KAAjBzD,EAAI8D,MAAM,GAAU,OAAO,CAMhC,KAAK,GAHDsB,IAAMpF,EAAI8D,MAAM,EAAG,GAGdT,EAAI,EAAO,EAAJA,EAAOA,IAAKI,IAAUzD,EAAI2D,OAAON,GAAKK,EAAYL,EAOlE,KADA,GAAI2B,GAAavB,EACVuB,EAAa,GAChBA,GAA0B,EAO9B,OADAA,GAAapB,KAAKyB,IAAIL,GAClBA,KAAgBhF,EAAI8D,MAAM,EAAG,IAAW,QAALsB,IAAsB,IAALA,GAAeA,EAAK,UAAiB,QAALA,GAAgBA,EAAK,OAAiB,GAG1HJ,GAAc,GACdA,GAA0B,GAE1BA,GAA0B,GAC9BxB,GAAUxD,EAAI8D,MAAM,EAAG,MACbkB,IAAexB,GAAU4B,EAAK,OAE5CzD,QAAS,SAAU3B,GAQf,IAAK,GAPDwD,GAIAsB,EAAU,GACVC,EAAM,EAED1B,EAAI,EAAO,GAAJA,EAAQA,IAGpB0B,IAAQ/E,EAAI2D,OAAON,GAAKyB,GAAW,GACvB,IAARC,IACAA,EAAM,IAGVD,EAAW,EAAIC,EAAO,EAK1B,OADAvB,IAAUxD,EAAI8D,MAAM,GAAI,KAChBgB,EAAUtB,GAAU,KAAO,GAEvC5B,QAAS,SAAU5B,GASf,IAAK,GARDwD,GAIAC,EAAQ,EACRC,GAAe,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAG5BL,EAAI,EAAO,EAAJA,EAAOA,IAAKI,IAAUzD,EAAI2D,OAAON,GAAKK,EAAYL,EAQlE,OALAI,GAAQ,GAAKA,EAAQ,GACP,KAAVA,IAAcA,EAAQ,GAG1BD,GAAUxD,EAAI8D,MAAM,EAAG,GAChBL,IAAUD,GAErB3B,QAAS,SAAU7B,GACf,GAAIwD,GAIAC,EAAQ,EACRC,GAAe,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAGjC,gBAAexD,KAAKF,KACpBA,EAAM,IAAMA,EAAImF,UAAU,EAAG,GAAKnF,EAAImF,UAAU,EAAG,GAAKnF,EAAImF,UAAU,EAAG,GAI7E,KAAK,GAAI9B,GAAI,EAAO,EAAJA,EAAOA,IACnBI,IAAUzD,EAAI2D,OAAON,GAAKK,EAAYL,EAuB1C,OAnBI,mBAAmBnD,KAAKF,KAGpByD,GADkB,MAAlBzD,EAAI2D,OAAO,GACF,GAEA,GAKjBF,GAAgB,GAEZA,EADU,IAAVA,EACQ,IAEAiB,OAAOC,aAAalB,EAAQ,IAIxCD,EAASxD,EAAI8D,MAAM,EAAG,GACfL,IAAUD,GAErB1B,MAAO,SAAU9B,GACb,GAAIwD,GAMAD,EAFAE,EAAQ,EACRC,GAAe,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAI9C,IAAyB,KAApB1D,EAAI8D,MAAM,EAAG,GACd,OAAO,CAIX,IADAP,GAAQvD,EAAI8D,MAAM,EAAG,IACT,EAAPP,GAAcA,EAAO,KAAiB,MAATA,GAAyB,MAATA,EAC9C,OAAO,CAIX,KAAK,GAAIF,GAAI,EAAO,GAAJA,EAAQA,IACpBE,GAAQvD,EAAI2D,OAAON,GAAKK,EAAYL,GAEhCI,GADAF,EAAO,EACEK,KAAKC,MAAMN,EAAO,IAAMA,EAAO,GAE/BA,CAWjB,OAPAE,GAAQ,GAAKA,EAAQ,GACjBA,EAAQ,IACRA,EAAQ,GAIZD,GAAUxD,EAAI8D,MAAM,GAAI,IACjBL,IAAUD,GAErBxB,SAAU,SAAUhC,GAChB,GAAIyD,GACAC,EACAF,CAKJ,IAAmB,IAAfxD,EAAIsD,OAAc,CAGlB,IAAK,UAAYpD,KAAKF,GAAM,OAAO,CAGnCyD,GAAQ,CACR,KAAK,GAAIJ,GAAI,EAAO,EAAJA,EAAOA,IACnBI,IAAUzD,EAAI2D,OAAON,IAAMA,EAAI,EAInC,IAAII,EAAQ,KAAO,GAAI,CACnBC,GAAe,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACpCD,EAAQ,CACR,KAAK,GAAIQ,GAAI,EAAO,EAAJA,EAAOA,IACnBR,IAAUzD,EAAI2D,OAAOM,GAAKP,EAAYO,GAY9C,MAPAR,IAAgB,GACF,KAAVA,IACAA,EAAQ,GAIZD,GAAUxD,EAAI8D,MAAM,EAAG,GAChBL,IAAUD,EAOjB,IAAK,WAAatD,KAAKF,GAAM,OAAO,CAGpCyD,GAAQ,EACRC,GAAe,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC7C,KAAK,GAAIU,GAAI,EAAO,GAAJA,EAAQA,IACpBX,IAAUzD,EAAI2D,OAAOS,GAAKV,EAAYU,EAI1C,IAAIX,EAAQ,KAAO,GAAI,CACnBC,GAAe,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC7CD,EAAQ,CACR,KAAK,GAAIc,GAAI,EAAO,GAAJA,EAAQA,IACpBd,IAAUzD,EAAI2D,OAAOY,GAAKb,EAAYa,GAY9C,MAPAd,IAAgB,GACF,KAAVA,IACAA,EAAQ,GAIZD,GAAUxD,EAAI8D,MAAM,GAAI,IACjBL,IAAUD,GAGzBvB,WAAY,SAAUjC,GAClB,GAAIwD,IAAUxD,EAAI8D,MAAM,EAAG,GACvBkB,GAAchF,EAAI8D,MAAM,EAAG,GAAK,EAGpC,OAAOkB,KAAexB,GAE1BzB,OAAQ,SAAU/B,GACd,GAAIwD,EAMJ,IAAI,SAAWtD,KAAKF,GAChB,QAAS,wBAA0BE,KAAKF,EAOxC,KAAK,GAJDyD,GAAQ,EACRC,GAAe,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAGtCL,EAAI,EAAO,GAAJA,EAAQA,IAAKI,IAAUzD,EAAI2D,OAAON,GAAKK,EAAYL,EAanE,OAVII,GAAQ,KAAO,GAAgB,IAAXzD,EAAI,KAAUyD,GAAgB,IAClDA,EAAQ,KAAO,EACfA,EAAQ,EAAIA,EAAQ,GACfA,EAAQ,GAAK,EAClBA,EAAQ,GAAKA,EAAQ,GACH,EAAbA,EAAQ,KACbA,EAAQ,EAAIA,EAAQ,IAGxBD,GAAUxD,EAAI8D,MAAM,GAAI,IACjBL,IAAUD,GAGzBtB,MAAO,SAAUlC,GASb,IAAK,GARDwD,GAIAC,EAAQ,EACRC,GAAe,EAAG,EAAG,EAAG,EAAG,EAAG,GAGzBL,EAAI,EAAO,EAAJA,EAAOA,IAAKI,IAAUzD,EAAI2D,OAAON,GAAKK,EAAYL,EAOlE,OAJAI,GAAQ,GAAKA,EAAQ,GAGrBD,GAAUxD,EAAI8D,MAAM,EAAG,GAChBL,IAAUD,GAErBrB,YAAa,SAAUnC,GASnB,IAAK,GARDwD,GAIAC,EAAQ,EACRC,GAAe,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAG/BL,EAAI,EAAO,EAAJA,EAAOA,IAAKI,IAAUzD,EAAI2D,OAAON,GAAKK,EAAYL,EAUlE,OAPAI,IAAgB,GACZA,EAAQ,IACRA,EAAQ,GAIZD,GAAUxD,EAAI8D,MAAM,EAAG,GAChBL,IAAUD,GAErBpB,OAAQ,SAAUpC,GAUd,IAAK,GATDwD,GAKAC,EAAQ,EACRC,GAAe,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAG/BL,EAAI,EAAO,EAAJA,EAAOA,IAAKI,IAAUzD,EAAI2D,OAAON,GAAKK,EAAYL,EAOlE,OAJAI,GAAQ,GAAKA,EAAQ,GACP,KAAVA,IACAA,EAAQ,GAEA,GAARA,GAGAD,GAAUxD,EAAI8D,MAAM,EAAG,GAChBL,IAAUD,GAJrB,QAOJnB,OAAQ,SAAUrC,GASd,IAAK,GARDwD,GAIAC,EAAQ,EACRC,GAAe,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAGlCL,EAAI,EAAO,EAAJA,EAAOA,IAAKI,IAAUzD,EAAI2D,OAAON,GAAKK,EAAYL,EAUlE,OAPAI,IAAgB,GACZA,EAAQ,IACRA,EAAQ,GAIZD,GAAUxD,EAAI8D,MAAM,EAAG,IAChBL,IAAUD,GAErBlB,SAAU,SAAUtC,GAShB,IAAK,GARDwD,GAIAC,EAAQ,EACRC,GAAe,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAG/BL,EAAI,EAAO,EAAJA,EAAOA,IAAKI,IAAUzD,EAAI2D,OAAON,GAAKK,EAAYL,EAUlE,OAPAI,GAAQ,GAAKA,EAAQ,GACjBA,EAAQ,IACRA,EAAQ,GAIZD,GAAUxD,EAAI8D,MAAM,EAAG,GAChBL,IAAUD,GAErBjB,QAAS,SAAUvC,GACf,GAAIwD,GAIAE,GAAe,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAGvC4B,EAAYtF,EAAIsD,MACpBI,GAAcA,EAAYI,MAAM,GAAKwB,EAErC,KAAK,GADD7B,GAAQ,EACHJ,EAAI,EAAGA,EAAIrD,EAAIsD,OAAS,EAAGD,IAChCI,IAAUzD,EAAI2D,OAAON,GAAKK,EAAYL,EAS1C,OALAI,GAAS,GAAKA,EAAS,GACT,KAAVA,IAAcA,EAAQ,GAG1BD,GAAUxD,EAAI8D,MAAM9D,EAAIsD,OAAS,EAAGtD,EAAIsD,QACjCG,IAAUD,GAErBf,OAAQ,SAAUzC,GASd,IAAK,GARDwD,GAMAwB,EAFAF,EAAU,GACVC,EAAM,EAGD1B,EAAI,EAAO,EAAJA,EAAOA,IAGnB0B,IAAQ/E,EAAI2D,OAAON,GAAKyB,GAAW,GACvB,IAARC,IACAA,EAAM,IAEVD,EAAW,EAAIC,EAAO,EAM1B,OAFAvB,GAAS,EACTwB,GAAcF,IAAY9E,EAAI8D,MAAM,EAAG,IAAO,GACvCkB,IAAexB,GAE1BhB,OAAQ,SAAUxC,GACd,GAAIwD,GACA+B,CAMJ,IAAmB,KAAfvF,EAAIsD,OAAe,CAGnB,IAAK,GAFDG,GAAQ,EACRC,GAAe,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtCL,EAAI,EAAO,GAAJA,EAAQA,IACpBI,IAAUzD,EAAI2D,OAAON,GAAKK,EAAYL,EAU1C,OAPAI,IAAgB,GACZA,EAAQ,IACRA,GAAgB,IAIpBD,GAAUxD,EAAI8D,MAAM,EAAG,IAChBL,IAAUD,EAGd,GAAmB,KAAfxD,EAAIsD,OAAe,CAM1B,IAAK,GALDkC,GAAS,EACTC,GAAgB,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC/CC,EAAS,EACTC,GAAgB,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAE7C1B,EAAI,EAAO,GAAJA,EAAQA,IACpBuB,IAAWxF,EAAI2D,OAAOM,GAAKwB,EAAaxB,EAG5CuB,IAAkB,GACdA,EAAS,IACTA,GAAkB,GAGtB,KAAK,GAAIpB,GAAI,EAAO,GAAJA,EAAQA,IACpBsB,IAAW1F,EAAI2D,OAAOS,GAAKuB,EAAavB,EAY5C,OATAsB,IAAkB,GACdA,EAAS,IACTA,GAAkB,IAKtBlC,GAAUxD,EAAI8D,MAAM,GAAI,IACxByB,GAAWvF,EAAI8D,MAAM,GAAI,IAClB,GAAY,IAG3BlB,OAAQ,SAAU5C,GAMd,IAAK,GALDwD,GAIAoC,EADAC,EAAI,EAECxC,EAAI,EAAO,EAAJA,EAAOA,GAAQ,EAC3BuC,GAAS5F,EAAI2D,OAAON,GACpBwC,GAAKjC,KAAKC,MAAM+B,EAAQ,GAAe,EAARA,EAAa,EAKhD,KAAK,GADDE,GAAI,EACC7B,EAAI,EAAO,EAAJA,EAAOA,GAAQ,EAC3B6B,IAAM9F,EAAI2D,OAAOM,EAGrB,IAAIe,IAAc,IAAMa,EAAIC,GAAK,IAAM,EAKvC,OAFAtC,IAAUxD,EAAI8D,MAAM,EAAG,IAEhBkB,IAAexB,GAE1Bd,SAAU,SAAU1C,GAShB,IAAK,GARDwD,GAIAC,EAAQ,EACRC,GAAe,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAG5BL,EAAI,EAAO,EAAJA,EAAOA,IAAKI,IAAUzD,EAAI2D,OAAON,GAAKK,EAAYL,EAWlE,OARAI,GAAQ,GAAKA,EAAQ,GACP,KAAVA,IACAA,EAAQ,GAKZD,GAAUxD,EAAI8D,MAAM,EAAG,KACH,KAAVL,GAAgBA,IAAUD,IAExCb,kBAAmB,SAAU3C,GACzB,GAAIwD,GAAS,EACTwB,EAAchF,EAAM,EAGxB,OAAOgF,KAAexB,GAM9B,OAFsB,gBAAX3D,SAAuBA,OAAOgD,UAAShD,OAAOgD,QAAUA,GAE5DA,KAGV,OAAOkD","file":"angular-jsvat.min.js","sourcesContent":["angular.module('jsvat', [])\n\r    .factory('JsVatFactory', function () {\n\rvar jsvat = (function () {\n    'use strict';\n\n    var _REGEXP_LIST = {\n        austria: /^(AT)U(\\d{8})$/,\n        belgium: /^(BE)(0?\\d{9})$/,\n        bulgaria: /^(BG)(\\d{9,10})$/,\n        switzerland: /^(CHE)(\\d{9})(MWST)?$/,\n        cyprus: /^(CY)([0-59]\\d{7}[A-Z])$/,\n        czech_republic: /^(CZ)(\\d{8,10})(\\d{3})?$/,\n        germany: /^(DE)([1-9]\\d{8})$/,\n        denmark: /^(DK)(\\d{8})$/,\n        estonia: /^(EE)(10\\d{7})$/,\n        greece: /^(EL)(\\d{9})$/,\n        spain: [\n            /^(ES)([A-Z]\\d{8})$/,\n            /^(ES)([A-HN-SW]\\d{7}[A-J])$/,\n            /^(ES)([0-9YZ]\\d{7}[A-Z])$/,\n            /^(ES)([KLMX]\\d{7}[A-Z])$/\n        ],\n        europe: /^(EU)(\\d{9})$/,\n        finland: /^(FI)(\\d{8})$/,\n        france: [\n            /^(FR)(\\d{11})$/,\n            /^(FR)([A-HJ-NP-Z]\\d{10})$/,\n            /^(FR)(\\d[A-HJ-NP-Z]\\d{9})$/,\n            /^(FR)([A-HJ-NP-Z]{2}\\d{9})$/\n        ],\n        united_kingdom: [\n            /^(GB)?(\\d{9})$/,\n            /^(GB)?(\\d{12})$/,\n            /^(GB)?(GD\\d{3})$/,\n            /^(GB)?(HA\\d{3})$/\n        ],\n        croatia: /^(HR)(\\d{11})$/,\n        hungary: /^(HU)(\\d{8})$/,\n        ireland: [\n            /^(IE)(\\d{7}[A-W])$/,\n            /^(IE)([7-9][A-Z\\*\\+)]\\d{5}[A-W])$/,\n            /^(IE)(\\d{7}[A-W][AH])$/\n        ],\n        italy: /^(IT)(\\d{11})$/,\n        latvia: /^(LV)(\\d{11})$/,\n        lithunia: /^(LT)(\\d{9}|\\d{12})$/,\n        luxembourg: /^(LU)(\\d{8})$/,\n        malta: /^(MT)([1-9]\\d{7})$/,\n        netherlands: /^(NL)(\\d{9})B\\d{2}$/,\n        norway: /^(NO)(\\d{9})$/,\n        poland: /^(PL)(\\d{10})$/,\n        portugal: /^(PT)(\\d{9})$/,\n        romania: /^(RO)([1-9]\\d{1,9})$/,\n        russia: /^(RU)(\\d{10}|\\d{12})$/,\n        serbia: /^(RS)(\\d{9})$/,\n        slovenia: /^(SI)([1-9]\\d{7})$/,\n        slovakia_republic: /^(SK)([1-9]\\d[2346-9]\\d{7})$/,\n        sweden: /^(SE)(\\d{10}01)$/\n    };\n\n    function _validateRegexp(vat, regexp) {\n        return regexp.test(vat);\n    }\n\n    function _validateRules(vat, regexp, countryName) {\n        var parsedNum = regexp.exec(vat);\n\n        //var code = parsedNum[1];\n        var number = parsedNum[2];\n        //if (!code || code.length === 0) code = 'GB';\n\n        return _checks[countryName](number);\n    }\n\n    function _validate(vat, regexp, countryName) {\n        var result = false;\n        if (_validateRegexp(vat, regexp)) {\n            result = _validateRules(vat, regexp, countryName);\n        }\n        return result;\n    }\n\n    var exports = {\n        checkVAT: function (vat) {\n            if (!vat) return false;\n            vat = vat.toString().toUpperCase().replace(/(\\s|-|\\.)+/g, '');\n\n            for (var countryName in _REGEXP_LIST) {\n                if (_REGEXP_LIST.hasOwnProperty(countryName)) {\n                    var regexp = _REGEXP_LIST[countryName];\n\n                    //TODO (S.Panfilov) this is not cross-browser check\n                    if (Array.isArray(regexp)) {\n                        for (var i = 0; i < regexp.length; i++) {\n                            if (_validate(vat, regexp[i], countryName)) return true;\n                        }\n                    } else {\n                        if (_validate(vat, regexp, countryName)) return true;\n                    }\n                }\n            }\n            return false;\n\n        }\n    };\n\n    var _checks = {\n        austria: function (vat) {\n            var total = 0;\n            var multipliers = [1, 2, 1, 2, 1, 2, 1];\n            var temp;\n            var expect;\n\n            for (var i = 0; i < 7; i++) {\n                temp = vat.charAt(i) * multipliers[i];\n                if (temp > 9)\n                    total += Math.floor(temp / 10) + temp % 10;\n                else\n                    total += temp;\n            }\n\n            total = 10 - (total + 4) % 10;\n            if (total === 10) total = 0;\n\n            expect = +vat.slice(7, 8);\n\n            return total === expect;\n        },\n        belgium: function (vat) {\n            var expect;\n            var check;\n            if (vat.length === 9) vat = \"0\" + vat;\n            if (+vat.slice(1, 2) === 0) return false;\n\n            check = (97 - +vat.slice(0, 8) % 97);\n            expect = +vat.slice(8, 10);\n            return check === expect;\n        },\n        bulgaria: function (vat) {\n            var expect;\n            var multipliers;\n            var temp;\n            var total;\n\n            var checkNineLengthVat = function () {\n\n                temp = 0;\n                for (var i = 0; i < 8; i++) {\n                    temp += +vat.charAt(i) * (i + 1);\n                }\n\n                total = temp % 11;\n                if (total !== 10) {\n                    expect = +vat.slice(8);\n                    return total === expect;\n                }\n\n                temp = 0;\n                for (var j = 0; j < 8; j++) {\n                    temp += +vat.charAt(j) * (j + 3);\n                }\n\n                total = temp % 11;\n                if (total === 10) total = 0;\n                expect = +vat.slice(8);\n\n                return total === expect;\n            };\n\n            var isPhysicalPerson = function () {\n                // 10 digit VAT code - see if it relates to a standard physical person\n                if ((/^\\d\\d[0-5]\\d[0-3]\\d\\d{4}$/).test(vat)) {\n                    // Check month\n                    var month = +vat.slice(2, 4);\n                    if ((month > 0 && month < 13) || (month > 20 && month < 33) || (month > 40 && month < 53)) {\n\n                        // Extract the next digit and multiply by the counter.\n                        multipliers = [2, 4, 8, 5, 10, 9, 7, 3, 6];\n                        total = 0;\n                        for (var k = 0; k < 9; k++) {\n                            total += +vat.charAt(k) * multipliers[k];\n                        }\n                        // Establish check digit.\n                        total = total % 11;\n                        if (total === 10) total = 0;\n\n                        // Check to see if the check digit given is correct, If not, try next type of person\n                        if (total === +vat.substr(9, 1)) return true;\n                    }\n                }\n\n                return false;\n\n            };\n\n            // It doesn't relate to a standard physical person - see if it relates to a foreigner.\n            var isForeigner = function () {\n                // Extract the next digit and multiply by the counter.\n                multipliers = [21, 19, 17, 13, 11, 9, 7, 3, 1];\n                total = 0;\n                for (var l = 0; l < 9; l++) {\n                    total += +vat.charAt(l) * multipliers[l];\n                }\n\n                // Check to see if the check digit given is correct, If not, try next type of person\n                if (total % 10 === +vat.substr(9, 1)) {\n                    return true;\n                }\n            };\n\n            var miscellaneousVAT = function () {\n                // Finally, if not yet identified, see if it conforms to a miscellaneous VAT number\n\n                // Extract the next digit and multiply by the counter.\n                multipliers = [4, 3, 2, 7, 6, 5, 4, 3, 2];\n                total = 0;\n                for (var m = 0; m < 9; m++) {\n                    total += +vat.charAt(m) * multipliers[m];\n                }\n\n                // Establish check digit.\n                total = 11 - total % 11;\n                if (total === 10) return false;\n                if (total === 11) total = 0;\n\n                // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n                expect = +vat.substr(9, 1);\n                return total === expect;\n            };\n\n            if (vat.length === 9) {\n                return checkNineLengthVat();\n            } else {\n                return isPhysicalPerson() || isForeigner() || miscellaneousVAT();\n            }\n\n        },\n        switzerland: function (vat) {\n            var expect;\n\n            // Checks the check digits of a Swiss VAT number.\n\n            // Extract the next digit and multiply by the counter.\n            var multipliers = [5, 4, 3, 2, 7, 6, 5, 4];\n            var total = 0;\n            for (var i = 0; i < 8; i++) total += +vat.charAt(i) * multipliers[i];\n\n            // Establish check digit.\n            total = 11 - total % 11;\n            if (total === 10) return false;\n            if (total === 11) total = 0;\n\n            // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n            expect = +vat.substr(8, 1);\n            return total === expect;\n        },\n        cyprus: function (vat) {\n            var expect;\n\n            // Checks the check digits of a Cypriot VAT number.\n\n            // Not allowed to start with '12'\n            if (+vat.slice(0, 2) === 12) return false;\n\n            // Extract the next digit and multiply by the counter.\n            var total = 0;\n            for (var i = 0; i < 8; i++) {\n                var temp = +vat.charAt(i);\n                if (i % 2 === 0) {\n                    switch (temp) {\n                        case 0:\n                            temp = 1;\n                            break;\n                        case 1:\n                            temp = 0;\n                            break;\n                        case 2:\n                            temp = 5;\n                            break;\n                        case 3:\n                            temp = 7;\n                            break;\n                        case 4:\n                            temp = 9;\n                            break;\n                        default:\n                            temp = temp * 2 + 3;\n                    }\n                }\n                total += temp;\n            }\n\n            // Establish check digit using modulus 26, and translate to char. equivalent.\n            total = total % 26;\n            total = String.fromCharCode(total + 65);\n\n            // Check to see if the check digit given is correct\n            expect = vat.substr(8, 1);\n            return total === expect;\n        },\n        czech_republic: function (vat) {\n            var expect;\n\n            // Checks the check digits of a Czech Republic VAT number.\n\n            var total = 0;\n            var multipliers = [8, 7, 6, 5, 4, 3, 2];\n\n            var czExp = [];\n            czExp[0] = (/^\\d{8}$/);\n            czExp[1] = (/^[0-5][0-9][0|1|5|6]\\d[0-3]\\d\\d{3}$/);\n            czExp[2] = (/^6\\d{8}$/);\n            czExp[3] = (/^\\d{2}[0-3|5-8]\\d[0-3]\\d\\d{4}$/);\n\n            // Legal entities\n            if (czExp[0].test(vat)) {\n\n                // Extract the next digit and multiply by the counter.\n                for (var i = 0; i < 7; i++) {\n                    total += +vat.charAt(i) * multipliers[i];\n                }\n\n                // Establish check digit.\n                total = 11 - total % 11;\n                if (total === 10) total = 0;\n                if (total === 11) total = 1;\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = +vat.slice(7, 8);\n                return total === expect;\n            }\n\n            // Individuals type 1\n            //else if (czExp[1].test(vat)) {\n            //TODO (S.Panfilov) It's seems to be an error\n            //    return !(temp = +vat.slice(0, 2) > 53);\n            //\n            //}\n\n            // Individuals type 2\n            else if (czExp[2].test(vat)) {\n\n                // Extract the next digit and multiply by the counter.\n                for (var j = 0; j < 7; j++) {\n                    total += +vat.charAt(j + 1) * multipliers[j];\n                }\n\n                // Establish check digit.\n                total = 11 - total % 11;\n                if (total === 10) total = 0;\n                if (total === 11) total = 1;\n\n                // Convert calculated check digit according to a lookup table;\n                var lookup = [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 10];\n                expect = +vat.slice(8, 9);\n                return lookup[total - 1] === expect;\n            }\n\n            // Individuals type 3\n            else if (czExp[3].test(vat)) {\n                var temp = +vat.slice(0, 2) + vat.slice(2, 4) + vat.slice(4, 6) + vat.slice(6, 8) + vat.slice(8);\n                expect = +vat % 11 === 0;\n                return !!(temp % 11 === 0 && expect);\n            }\n\n            // else error\n            return false;\n        },\n        germany: function (vat) {\n            var expect;\n\n            // Checks the check digits of a German VAT number.\n\n            var product = 10;\n            var sum = 0;\n            var checkDigit = 0;\n            for (var i = 0; i < 8; i++) {\n\n                // Extract the next digit and implement peculiar algorithm!.\n                sum = (+vat.charAt(i) + product) % 10;\n                if (sum === 0) {\n                    sum = 10;\n                }\n                product = (2 * sum) % 11;\n            }\n\n            // Establish check digit.\n            if (11 - product === 10) {\n                checkDigit = 0;\n            } else {\n                checkDigit = 11 - product;\n            }\n\n            // Compare it with the last two characters of the VAT number. If the same, then it is a valid\n            // check digit.\n            expect = +vat.slice(8, 9);\n            return checkDigit === expect;\n        },\n        denmark: function (vat) {\n            var total = 0;\n            var multipliers = [2, 7, 6, 5, 4, 3, 2, 1];\n\n            for (var i = 0; i < 8; i++) total += +vat.charAt(i) * multipliers[i];\n\n            return total % 11 === 0;\n        },\n        estonia: function (vat) {\n            var expect;\n\n            // Checks the check digits of an Estonian VAT number.\n\n            var total = 0;\n            var multipliers = [3, 7, 1, 3, 7, 1, 3, 7];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += +vat.charAt(i) * multipliers[i];\n\n            // Establish check digits using modulus 10.\n            total = 10 - total % 10;\n            if (total === 10) total = 0;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(8, 9);\n            return total === expect;\n        },\n        greece: function (vat) {\n            var expect;\n\n            // Checks the check digits of a Greek VAT number.\n\n            var total = 0;\n            var multipliers = [256, 128, 64, 32, 16, 8, 4, 2];\n\n            //eight character numbers should be prefixed with an 0.\n            if (vat.length === 8) {\n                vat = \"0\" + vat;\n            }\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += +vat.charAt(i) * multipliers[i];\n\n            // Establish check digit.\n            total = total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(8, 9);\n            return total === expect;\n        },\n        spain: function (vat) {\n            var expect;\n\n            // Checks the check digits of a Spanish VAT number.\n\n            var total = 0;\n            var temp = 0;\n            var multipliers = [2, 1, 2, 1, 2, 1, 2];\n            var esExp = [];\n            esExp[0] = (/^[A-H|J|U|V]\\d{8}$/);\n            esExp[1] = (/^[A-H|N-S|W]\\d{7}[A-J]$/);\n            esExp[2] = (/^[0-9|Y|Z]\\d{7}[A-Z]$/);\n            esExp[3] = (/^[K|L|M|X]\\d{7}[A-Z]$/);\n            var i = 0;\n\n            // National juridical entities\n            if (esExp[0].test(vat)) {\n\n                // Extract the next digit and multiply by the counter.\n                for (i = 0; i < 7; i++) {\n                    temp = vat.charAt(i + 1) * multipliers[i];\n                    if (temp > 9)\n                        total += Math.floor(temp / 10) + temp % 10;\n                    else\n                        total += temp;\n                }\n                // Now calculate the check digit itself.\n                total = 10 - total % 10;\n                if (total === 10) {\n                    total = 0;\n                }\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = +vat.slice(8, 9);\n                return total === expect;\n            }\n\n            // Juridical entities other than national ones\n            else if (esExp[1].test(vat)) {\n\n                // Extract the next digit and multiply by the counter.\n                for (i = 0; i < 7; i++) {\n                    temp = vat.charAt(i + 1) * multipliers[i];\n                    if (temp > 9)\n                        total += Math.floor(temp / 10) + temp % 10;\n                    else\n                        total += temp;\n                }\n\n                // Now calculate the check digit itself.\n                total = 10 - total % 10;\n                total = String.fromCharCode(total + 64);\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = vat.slice(8, 9);\n                return total === expect;\n            }\n\n            // Personal number (NIF) (starting with numeric of Y or Z)\n            else if (esExp[2].test(vat)) {\n                var tempnumber = vat;\n                if (tempnumber.substring(0, 1) === 'Y') tempnumber = tempnumber.replace(/Y/, \"1\");\n                if (tempnumber.substring(0, 1) === 'Z') tempnumber = tempnumber.replace(/Z/, \"2\");\n                expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+tempnumber.substring(0, 8) % 23);\n                return tempnumber.charAt(8) === expect;\n            }\n\n            // Personal number (NIF) (starting with K, L, M, or X)\n            else if (esExp[3].test(vat)) {\n                expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+vat.substring(1, 8) % 23);\n                return vat.charAt(8) === expect;\n            }\n\n            else return false;\n        },\n        europe: function () {\n\n            // We know little about EU numbers apart from the fact that the first 3 digits represent the\n            // country, and that there are nine digits in total.\n            return true;\n        },\n        finland: function (vat) {\n            var expect;\n\n            // Checks the check digits of a Finnish VAT number.\n\n            var total = 0;\n            var multipliers = [7, 9, 10, 5, 8, 4, 2];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) total += +vat.charAt(i) * multipliers[i];\n\n            // Establish check digit.\n            total = 11 - total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(7, 8);\n            return total === expect;\n        },\n        france: function (vat) {\n            var expect;\n\n            // Checks the check digits of a French VAT number.\n\n            if (!(/^\\d{11}$/).test(vat)) {\n                return true;\n            }\n\n            // Extract the last nine digits as an integer.\n            var total = +vat.substring(2);\n\n            // Establish check digit.\n            total = (total * 100 + 12) % 97;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(0, 2);\n            return total === expect;\n        },\n        united_kingdom: function (vat) {\n            var expect;\n\n            // Checks the check digits of a UK VAT number.\n\n            var multipliers = [8, 7, 6, 5, 4, 3, 2];\n\n            // Government departments\n            if (vat.substr(0, 2) === 'GD') {\n                expect = 500;\n                return vat.substr(2, 3) < expect;\n            }\n\n            // Health authorities\n            if (vat.substr(0, 2) === 'HA') {\n                expect = 499;\n                return vat.substr(2, 3) > expect;\n            }\n\n            // Standard and commercial numbers\n            var total = 0;\n\n            // 0 VAT numbers disallowed!\n            if (+vat.slice(0) === 0) return false;\n\n            // Check range is OK for modulus 97 calculation\n            var no = +vat.slice(0, 7);\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) total += +vat.charAt(i) * multipliers[i];\n\n            // Old numbers use a simple 97 modulus, but new numbers use an adaptation of that (less 55). Our\n            // VAT number could use either system, so we check it against both.\n\n            // Establish check digits by subtracting 97 from total until negative.\n            var checkDigit = total;\n            while (checkDigit > 0) {\n                checkDigit = checkDigit - 97;\n            }\n\n            // Get the absolute value and compare it with the last two characters of the VAT number. If the\n            // same, then it is a valid traditional check digit. However, even then the number must fit within\n            // certain specified ranges.\n            checkDigit = Math.abs(checkDigit);\n            if (checkDigit === +vat.slice(7, 9) && no < 9990001 && (no < 100000 || no > 999999) && (no < 9490001 || no > 9700000)) return true;\n\n            // Now try the new method by subtracting 55 from the check digit if we can - else add 42\n            if (checkDigit >= 55)\n                checkDigit = checkDigit - 55;\n            else\n                checkDigit = checkDigit + 42;\n            expect = +vat.slice(7, 9);\n            return !!(checkDigit === expect && no > 1000000);\n        },\n        croatia: function (vat) {\n            var expect;\n\n            // Checks the check digits of a Croatian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n            var product = 10;\n            var sum = 0;\n\n            for (var i = 0; i < 10; i++) {\n\n                // Extract the next digit and implement the algorithm\n                sum = (+vat.charAt(i) + product) % 10;\n                if (sum === 0) {\n                    sum = 10;\n                }\n\n                product = (2 * sum) % 11;\n            }\n\n            // Now check that we have the right check digit\n            expect = +vat.slice(10, 11);\n            return (product + expect) % 10 === 1;\n        },\n        hungary: function (vat) {\n            var expect;\n\n            // Checks the check digits of a Hungarian VAT number.\n\n            var total = 0;\n            var multipliers = [9, 7, 3, 1, 9, 7, 3];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) total += +vat.charAt(i) * multipliers[i];\n\n            // Establish check digit.\n            total = 10 - total % 10;\n            if (total === 10) total = 0;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(7, 8);\n            return total === expect;\n        },\n        ireland: function (vat) {\n            var expect;\n\n            // Checks the check digits of an Irish VAT number.\n\n            var total = 0;\n            var multipliers = [8, 7, 6, 5, 4, 3, 2];\n\n            // If the code is type 1 format, we need to convert it to the new before performing the validation.\n            if (/^\\d[A-Z\\*\\+]/.test(vat)) {\n                vat = \"0\" + vat.substring(2, 7) + vat.substring(0, 1) + vat.substring(7, 8);\n            }\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) {\n                total += +vat.charAt(i) * multipliers[i];\n            }\n\n            // If the number is type 3 then we need to include the trailing A or H in the calculation\n            if (/^\\d{7}[A-Z][AH]$/.test(vat)) {\n                // Add in a multiplier for the character A (1*9=9) or H (8*9=72)\n                if (vat.charAt(8) === 'H') {\n                    total += 72;\n                } else {\n                    total += 9;\n                }\n            }\n\n            // Establish check digit using modulus 23, and translate to char. equivalent.\n            total = total % 23;\n            if (total === 0) {\n                total = \"W\";\n            } else {\n                total = String.fromCharCode(total + 64);\n            }\n\n            // Compare it with the eighth character of the VAT number. If it's the same, then it's valid.\n            expect = vat.slice(7, 8);\n            return total === expect;\n        },\n        italy: function (vat) {\n            var expect;\n\n            // Checks the check digits of an Italian VAT number.\n\n            var total = 0;\n            var multipliers = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2];\n            var temp;\n\n            // The last three digits are the issuing office, and cannot exceed more 201, unless 999 or 888\n            if (+vat.slice(0, 7) === 0) {\n                return false;\n            }\n\n            temp = +vat.slice(7, 10);\n            if ((temp < 1) || (temp > 201) && temp !== 999 && temp !== 888) {\n                return false;\n            }\n\n            // Extract the next digit and multiply by the appropriate\n            for (var i = 0; i < 10; i++) {\n                temp = +vat.charAt(i) * multipliers[i];\n                if (temp > 9)\n                    total += Math.floor(temp / 10) + temp % 10;\n                else\n                    total += temp;\n            }\n\n            // Establish check digit.\n            total = 10 - total % 10;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(10, 11);\n            return total === expect;\n        },\n        lithunia: function (vat) {\n            var total;\n            var multipliers;\n            var expect;\n\n            // Checks the check digits of a Lithuanian VAT number.\n\n            // 9 character VAT numbers are for legal persons\n            if (vat.length === 9) {\n\n                // 8th character must be one\n                if (!(/^\\d{7}1/).test(vat)) return false;\n\n                // Extract the next digit and multiply by the counter+1.\n                total = 0;\n                for (var i = 0; i < 8; i++) {\n                    total += +vat.charAt(i) * (i + 1);\n                }\n\n                // Can have a double check digit calculation!\n                if (total % 11 === 10) {\n                    multipliers = [3, 4, 5, 6, 7, 8, 9, 1];\n                    total = 0;\n                    for (var j = 0; j < 8; j++) {\n                        total += +vat.charAt(j) * multipliers[j];\n                    }\n                }\n\n                // Establish check digit.\n                total = total % 11;\n                if (total === 10) {\n                    total = 0;\n                }\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = +vat.slice(8, 9);\n                return total === expect;\n            }\n\n            // 12 character VAT numbers are for temporarily registered taxpayers\n            else {\n\n                // 11th character must be one\n                if (!(/^\\d{10}1/).test(vat)) return false;\n\n                // Extract the next digit and multiply by the counter+1.\n                total = 0;\n                multipliers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2];\n                for (var k = 0; k < 11; k++) {\n                    total += +vat.charAt(k) * multipliers[k];\n                }\n\n                // Can have a double check digit calculation!\n                if (total % 11 === 10) {\n                    multipliers = [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4];\n                    total = 0;\n                    for (var l = 0; l < 11; l++) {\n                        total += +vat.charAt(l) * multipliers[l];\n                    }\n                }\n\n                // Establish check digit.\n                total = total % 11;\n                if (total === 10) {\n                    total = 0;\n                }\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = +vat.slice(11, 12);\n                return total === expect;\n            }\n        },\n        luxembourg: function (vat) {\n            var expect = +vat.slice(6, 8);\n            var checkDigit = +vat.slice(0, 6) % 89;\n            // Checks the check digits of a Luxembourg VAT number.\n\n            return checkDigit === expect;\n        },\n        latvia: function (vat) {\n            var expect;\n\n            // Checks the check digits of a Latvian VAT number.\n\n            // Differentiate between legal entities and natural bodies. For the latter we simply check that\n            // the first six digits correspond to valid DDMMYY dates.\n            if ((/^[0-3]/).test(vat)) {\n                return !!(/^[0-3][0-9][0-1][0-9]/).test(vat);\n            } else {\n\n                var total = 0;\n                var multipliers = [9, 1, 4, 8, 3, 10, 2, 5, 7, 6];\n\n                // Extract the next digit and multiply by the counter.\n                for (var i = 0; i < 10; i++) total += +vat.charAt(i) * multipliers[i];\n\n                // Establish check digits by getting modulus 11.\n                if (total % 11 === 4 && vat[0] === 9) total = total - 45;\n                if (total % 11 === 4)\n                    total = 4 - total % 11;\n                else if (total % 11 > 4)\n                    total = 14 - total % 11;\n                else if (total % 11 < 4)\n                    total = 3 - total % 11;\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = +vat.slice(10, 11);\n                return total === expect;\n            }\n        },\n        malta: function (vat) {\n            var expect;\n\n            // Checks the check digits of a Maltese VAT number.\n\n            var total = 0;\n            var multipliers = [3, 4, 6, 7, 8, 9];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 6; i++) total += +vat.charAt(i) * multipliers[i];\n\n            // Establish check digits by getting modulus 37.\n            total = 37 - total % 37;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(6, 8);\n            return total === expect;\n        },\n        netherlands: function (vat) {\n            var expect;\n\n            // Checks the check digits of a Dutch VAT number.\n\n            var total = 0;\n            var multipliers = [9, 8, 7, 6, 5, 4, 3, 2];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += +vat.charAt(i) * multipliers[i];\n\n            // Establish check digits by getting modulus 11.\n            total = total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(8, 9);\n            return total === expect;\n        },\n        norway: function (vat) {\n            var expect;\n\n            // Checks the check digits of a Norwegian VAT number.\n            // See http://www.brreg.no/english/coordination/number.html\n\n            var total = 0;\n            var multipliers = [3, 2, 7, 6, 5, 4, 3, 2];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += +vat.charAt(i) * multipliers[i];\n\n            // Establish check digits by getting modulus 11. Check digits > 9 are invalid\n            total = 11 - total % 11;\n            if (total === 11) {\n                total = 0;\n            }\n            if (total < 10) {\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = +vat.slice(8, 9);\n                return total === expect;\n            }\n        },\n        poland: function (vat) {\n            var expect;\n\n            // Checks the check digits of a Polish VAT number.\n\n            var total = 0;\n            var multipliers = [6, 5, 7, 2, 3, 4, 5, 6, 7];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 9; i++) total += +vat.charAt(i) * multipliers[i];\n\n            // Establish check digits subtracting modulus 11 from 11.\n            total = total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(9, 10);\n            return total === expect;\n        },\n        portugal: function (vat) {\n            var expect;\n\n            // Checks the check digits of a Portugese VAT number.\n\n            var total = 0;\n            var multipliers = [9, 8, 7, 6, 5, 4, 3, 2];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += +vat.charAt(i) * multipliers[i];\n\n            // Establish check digits subtracting modulus 11 from 11.\n            total = 11 - total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(8, 9);\n            return total === expect;\n        },\n        romania: function (vat) {\n            var expect;\n\n            // Checks the check digits of a Romanian VAT number.\n\n            var multipliers = [7, 5, 3, 2, 1, 7, 5, 3, 2];\n\n            // Extract the next digit and multiply by the counter.\n            var vatLength = vat.length;\n            multipliers = multipliers.slice(10 - vatLength);\n            var total = 0;\n            for (var i = 0; i < vat.length - 1; i++) {\n                total += +vat.charAt(i) * multipliers[i];\n            }\n\n            // Establish check digits by getting modulus 11.\n            total = (10 * total) % 11;\n            if (total === 10) total = 0;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(vat.length - 1, vat.length);\n            return total === expect;\n        },\n        serbia: function (vat) {\n            var expect;\n\n            // Checks the check digits of a Serbian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n            var product = 10;\n            var sum = 0;\n            var checkDigit;\n\n            for (var i = 0; i < 8; i++) {\n\n                // Extract the next digit and implement the algorithm\n                sum = (+vat.charAt(i) + product) % 10;\n                if (sum === 0) {\n                    sum = 10;\n                }\n                product = (2 * sum) % 11;\n            }\n\n            // Now check that we have the right check digit\n            expect = 1;\n            checkDigit = (product + (+vat.slice(8, 9))) % 10;\n            return checkDigit === expect;\n        },\n        russia: function (vat) {\n            var expect;\n            var expect2;\n\n            // Checks the check digits of a Russian INN number\n            // See http://russianpartner.biz/test_inn.html for algorithm\n\n            // 10 digit INN numbers\n            if (vat.length === 10) {\n                var total = 0;\n                var multipliers = [2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\n                for (var i = 0; i < 10; i++) {\n                    total += +vat.charAt(i) * multipliers[i];\n                }\n\n                total = total % 11;\n                if (total > 9) {\n                    total = total % 10;\n                }\n\n                // Compare it with the last character of the VAT number. If it is the same, then it's valid\n                expect = +vat.slice(9, 10);\n                return total === expect;\n\n                // 12 digit INN numbers\n            } else if (vat.length === 12) {\n                var total1 = 0;\n                var multipliers1 = [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\n                var total2 = 0;\n                var multipliers2 = [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\n\n                for (var j = 0; j < 11; j++) {\n                    total1 += +vat.charAt(j) * multipliers1[j];\n                }\n\n                total1 = total1 % 11;\n                if (total1 > 9) {\n                    total1 = total1 % 10;\n                }\n\n                for (var k = 0; k < 11; k++) {\n                    total2 += +vat.charAt(k) * multipliers2[k];\n                }\n\n                total2 = total2 % 11;\n                if (total2 > 9) {\n                    total2 = total2 % 10;\n                }\n\n                // Compare the first check with the 11th character and the second check with the 12th and last\n                // character of the VAT number. If they're both the same, then it's valid\n                expect = +vat.slice(10, 11);\n                expect2 = +vat.slice(11, 12);\n                return (expect) && (expect2);\n            }\n        },\n        sweden: function (vat) {\n            var expect;\n\n            // Calculate R where R = R1 + R3 + R5 + R7 + R9, and Ri = INT(Ci/5) + (Ci*2) modulo 10\n            var R = 0;\n            var digit;\n            for (var i = 0; i < 9; i = i + 2) {\n                digit = +vat.charAt(i);\n                R += Math.floor(digit / 5) + ((digit * 2) % 10);\n            }\n\n            // Calculate S where S = C2 + C4 + C6 + C8\n            var S = 0;\n            for (var j = 1; j < 9; j = j + 2) {\n                S += +vat.charAt(j);\n            }\n\n            var checkDigit = (10 - (R + S) % 10) % 10;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(9, 10);\n\n            return checkDigit === expect;\n        },\n        slovenia: function (vat) {\n            var expect;\n\n            // Checks the check digits of a Slovenian VAT number.\n\n            var total = 0;\n            var multipliers = [8, 7, 6, 5, 4, 3, 2];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) total += +vat.charAt(i) * multipliers[i];\n\n            // Establish check digits using modulus 11\n            total = 11 - total % 11;\n            if (total === 10) {\n                total = 0;\n            }\n\n            // Compare the number with the last character of the VAT number. If it is the\n            // same, then it's a valid check digit.\n            expect = +vat.slice(7, 8);\n            return !!(total !== 11 && total === expect);\n        },\n        slovakia_republic: function (vat) {\n            var expect = 0;\n            var checkDigit = (vat % 11);\n            // Checks the check digits of a Slovakian VAT number.\n            // Check that the modulus of the whole VAT number is 0 - else error\n            return checkDigit === expect;\n        }\n    };\n\n    if (typeof module === 'object' && module.exports) module.exports = exports;\n\n    return exports;\n})();\n\r return VatChecker;});"],"sourceRoot":"/source/"}